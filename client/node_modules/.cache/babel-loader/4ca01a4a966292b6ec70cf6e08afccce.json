{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\nvar componentRegex = /\\./;\nvar orRegex = /\\|\\|/;\nvar rangeRegex = /\\s+\\-\\s+/;\nvar modifierRegex = /^(<=|<|=|>=|~>|~|>|)?\\s*(.+)/;\nvar numericRegex = /^(\\d*)(.*)/;\n/**\n * Splits input `range` on \"||\" and returns true if any subrange matches\n * `version`.\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\n\nfunction checkOrExpression(range, version) {\n  var expressions = range.split(orRegex);\n\n  if (expressions.length > 1) {\n    return expressions.some(function (range) {\n      return VersionRange.contains(range, version);\n    });\n  } else {\n    range = expressions[0].trim();\n    return checkRangeExpression(range, version);\n  }\n}\n/**\n * Splits input `range` on \" - \" (the surrounding whitespace is required) and\n * returns true if version falls between the two operands.\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\n\n\nfunction checkRangeExpression(range, version) {\n  var expressions = range.split(rangeRegex);\n  !(expressions.length > 0 && expressions.length <= 2) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'the \"-\" operator expects exactly 2 operands') : invariant(false) : void 0;\n\n  if (expressions.length === 1) {\n    return checkSimpleExpression(expressions[0], version);\n  } else {\n    var startVersion = expressions[0],\n        endVersion = expressions[1];\n    !(isSimpleVersion(startVersion) && isSimpleVersion(endVersion)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'operands to the \"-\" operator must be simple (no modifiers)') : invariant(false) : void 0;\n    return checkSimpleExpression('>=' + startVersion, version) && checkSimpleExpression('<=' + endVersion, version);\n  }\n}\n/**\n * Checks if `range` matches `version`. `range` should be a \"simple\" range (ie.\n * not a compound range using the \" - \" or \"||\" operators).\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\n\n\nfunction checkSimpleExpression(range, version) {\n  range = range.trim();\n\n  if (range === '') {\n    return true;\n  }\n\n  var versionComponents = version.split(componentRegex);\n\n  var _getModifierAndCompon = getModifierAndComponents(range),\n      modifier = _getModifierAndCompon.modifier,\n      rangeComponents = _getModifierAndCompon.rangeComponents;\n\n  switch (modifier) {\n    case '<':\n      return checkLessThan(versionComponents, rangeComponents);\n\n    case '<=':\n      return checkLessThanOrEqual(versionComponents, rangeComponents);\n\n    case '>=':\n      return checkGreaterThanOrEqual(versionComponents, rangeComponents);\n\n    case '>':\n      return checkGreaterThan(versionComponents, rangeComponents);\n\n    case '~':\n    case '~>':\n      return checkApproximateVersion(versionComponents, rangeComponents);\n\n    default:\n      return checkEqual(versionComponents, rangeComponents);\n  }\n}\n/**\n * Checks whether `a` is less than `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\n\n\nfunction checkLessThan(a, b) {\n  return compareComponents(a, b) === -1;\n}\n/**\n * Checks whether `a` is less than or equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\n\n\nfunction checkLessThanOrEqual(a, b) {\n  var result = compareComponents(a, b);\n  return result === -1 || result === 0;\n}\n/**\n * Checks whether `a` is equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\n\n\nfunction checkEqual(a, b) {\n  return compareComponents(a, b) === 0;\n}\n/**\n * Checks whether `a` is greater than or equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\n\n\nfunction checkGreaterThanOrEqual(a, b) {\n  var result = compareComponents(a, b);\n  return result === 1 || result === 0;\n}\n/**\n * Checks whether `a` is greater than `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\n\n\nfunction checkGreaterThan(a, b) {\n  return compareComponents(a, b) === 1;\n}\n/**\n * Checks whether `a` is \"reasonably close\" to `b` (as described in\n * https://www.npmjs.org/doc/misc/semver.html). For example, if `b` is \"1.3.1\"\n * then \"reasonably close\" is defined as \">= 1.3.1 and < 1.4\".\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\n\n\nfunction checkApproximateVersion(a, b) {\n  var lowerBound = b.slice();\n  var upperBound = b.slice();\n\n  if (upperBound.length > 1) {\n    upperBound.pop();\n  }\n\n  var lastIndex = upperBound.length - 1;\n  var numeric = parseInt(upperBound[lastIndex], 10);\n\n  if (isNumber(numeric)) {\n    upperBound[lastIndex] = numeric + 1 + '';\n  }\n\n  return checkGreaterThanOrEqual(a, lowerBound) && checkLessThan(a, upperBound);\n}\n/**\n * Extracts the optional modifier (<, <=, =, >=, >, ~, ~>) and version\n * components from `range`.\n *\n * For example, given `range` \">= 1.2.3\" returns an object with a `modifier` of\n * `\">=\"` and `components` of `[1, 2, 3]`.\n *\n * @param {string} range\n * @returns {object}\n */\n\n\nfunction getModifierAndComponents(range) {\n  var rangeComponents = range.split(componentRegex);\n  var matches = rangeComponents[0].match(modifierRegex);\n  !matches ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'expected regex to match but it did not') : invariant(false) : void 0;\n  return {\n    modifier: matches[1],\n    rangeComponents: [matches[2]].concat(rangeComponents.slice(1))\n  };\n}\n/**\n * Determines if `number` is a number.\n *\n * @param {mixed} number\n * @returns {boolean}\n */\n\n\nfunction isNumber(number) {\n  return !isNaN(number) && isFinite(number);\n}\n/**\n * Tests whether `range` is a \"simple\" version number without any modifiers\n * (\">\", \"~\" etc).\n *\n * @param {string} range\n * @returns {boolean}\n */\n\n\nfunction isSimpleVersion(range) {\n  return !getModifierAndComponents(range).modifier;\n}\n/**\n * Zero-pads array `array` until it is at least `length` long.\n *\n * @param {array} array\n * @param {number} length\n */\n\n\nfunction zeroPad(array, length) {\n  for (var i = array.length; i < length; i++) {\n    array[i] = '0';\n  }\n}\n/**\n * Normalizes `a` and `b` in preparation for comparison by doing the following:\n *\n * - zero-pads `a` and `b`\n * - marks any \"x\", \"X\" or \"*\" component in `b` as equivalent by zero-ing it out\n *   in both `a` and `b`\n * - marks any final \"*\" component in `b` as a greedy wildcard by zero-ing it\n *   and all of its successors in `a`\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {array<array<string>>}\n */\n\n\nfunction normalizeVersions(a, b) {\n  a = a.slice();\n  b = b.slice();\n  zeroPad(a, b.length); // mark \"x\" and \"*\" components as equal\n\n  for (var i = 0; i < b.length; i++) {\n    var matches = b[i].match(/^[x*]$/i);\n\n    if (matches) {\n      b[i] = a[i] = '0'; // final \"*\" greedily zeros all remaining components\n\n      if (matches[0] === '*' && i === b.length - 1) {\n        for (var j = i; j < a.length; j++) {\n          a[j] = '0';\n        }\n      }\n    }\n  }\n\n  zeroPad(b, a.length);\n  return [a, b];\n}\n/**\n * Returns the numerical -- not the lexicographical -- ordering of `a` and `b`.\n *\n * For example, `10-alpha` is greater than `2-beta`.\n *\n * @param {string} a\n * @param {string} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\n\n\nfunction compareNumeric(a, b) {\n  var aPrefix = a.match(numericRegex)[1];\n  var bPrefix = b.match(numericRegex)[1];\n  var aNumeric = parseInt(aPrefix, 10);\n  var bNumeric = parseInt(bPrefix, 10);\n\n  if (isNumber(aNumeric) && isNumber(bNumeric) && aNumeric !== bNumeric) {\n    return compare(aNumeric, bNumeric);\n  } else {\n    return compare(a, b);\n  }\n}\n/**\n * Returns the ordering of `a` and `b`.\n *\n * @param {string|number} a\n * @param {string|number} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\n\n\nfunction compare(a, b) {\n  !(typeof a === typeof b) ? process.env.NODE_ENV !== \"production\" ? invariant(false, '\"a\" and \"b\" must be of the same type') : invariant(false) : void 0;\n\n  if (a > b) {\n    return 1;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n/**\n * Compares arrays of version components.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\n\n\nfunction compareComponents(a, b) {\n  var _normalizeVersions = normalizeVersions(a, b),\n      aNormalized = _normalizeVersions[0],\n      bNormalized = _normalizeVersions[1];\n\n  for (var i = 0; i < bNormalized.length; i++) {\n    var result = compareNumeric(aNormalized[i], bNormalized[i]);\n\n    if (result) {\n      return result;\n    }\n  }\n\n  return 0;\n}\n\nvar VersionRange = {\n  /**\n   * Checks whether `version` satisfies the `range` specification.\n   *\n   * We support a subset of the expressions defined in\n   * https://www.npmjs.org/doc/misc/semver.html:\n   *\n   *    version   Must match version exactly\n   *    =version  Same as just version\n   *    >version  Must be greater than version\n   *    >=version Must be greater than or equal to version\n   *    <version  Must be less than version\n   *    <=version Must be less than or equal to version\n   *    ~version  Must be at least version, but less than the next significant\n   *              revision above version:\n   *              \"~1.2.3\" is equivalent to \">= 1.2.3 and < 1.3\"\n   *    ~>version Equivalent to ~version\n   *    1.2.x     Must match \"1.2.x\", where \"x\" is a wildcard that matches\n   *              anything\n   *    1.2.*     Similar to \"1.2.x\", but \"*\" in the trailing position is a\n   *              \"greedy\" wildcard, so will match any number of additional\n   *              components:\n   *              \"1.2.*\" will match \"1.2.1\", \"1.2.1.1\", \"1.2.1.1.1\" etc\n   *    *         Any version\n   *    \"\"        (Empty string) Same as *\n   *    v1 - v2   Equivalent to \">= v1 and <= v2\"\n   *    r1 || r2  Passes if either r1 or r2 are satisfied\n   *\n   * @param {string} range\n   * @param {string} version\n   * @returns {boolean}\n   */\n  contains: function contains(range, version) {\n    return checkOrExpression(range.trim(), version.trim());\n  }\n};\nmodule.exports = VersionRange;","map":{"version":3,"names":["invariant","require","componentRegex","orRegex","rangeRegex","modifierRegex","numericRegex","checkOrExpression","range","version","expressions","split","length","some","VersionRange","contains","trim","checkRangeExpression","process","env","NODE_ENV","checkSimpleExpression","startVersion","endVersion","isSimpleVersion","versionComponents","_getModifierAndCompon","getModifierAndComponents","modifier","rangeComponents","checkLessThan","checkLessThanOrEqual","checkGreaterThanOrEqual","checkGreaterThan","checkApproximateVersion","checkEqual","a","b","compareComponents","result","lowerBound","slice","upperBound","pop","lastIndex","numeric","parseInt","isNumber","matches","match","concat","number","isNaN","isFinite","zeroPad","array","i","normalizeVersions","j","compareNumeric","aPrefix","bPrefix","aNumeric","bNumeric","compare","_normalizeVersions","aNormalized","bNormalized","module","exports"],"sources":["/home/sudhanshu/Documents/combett/node_modules/fbjs/lib/VersionRange.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\nvar componentRegex = /\\./;\nvar orRegex = /\\|\\|/;\nvar rangeRegex = /\\s+\\-\\s+/;\nvar modifierRegex = /^(<=|<|=|>=|~>|~|>|)?\\s*(.+)/;\nvar numericRegex = /^(\\d*)(.*)/;\n/**\n * Splits input `range` on \"||\" and returns true if any subrange matches\n * `version`.\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\n\nfunction checkOrExpression(range, version) {\n  var expressions = range.split(orRegex);\n\n  if (expressions.length > 1) {\n    return expressions.some(function (range) {\n      return VersionRange.contains(range, version);\n    });\n  } else {\n    range = expressions[0].trim();\n    return checkRangeExpression(range, version);\n  }\n}\n/**\n * Splits input `range` on \" - \" (the surrounding whitespace is required) and\n * returns true if version falls between the two operands.\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\n\n\nfunction checkRangeExpression(range, version) {\n  var expressions = range.split(rangeRegex);\n  !(expressions.length > 0 && expressions.length <= 2) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'the \"-\" operator expects exactly 2 operands') : invariant(false) : void 0;\n\n  if (expressions.length === 1) {\n    return checkSimpleExpression(expressions[0], version);\n  } else {\n    var startVersion = expressions[0],\n        endVersion = expressions[1];\n    !(isSimpleVersion(startVersion) && isSimpleVersion(endVersion)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'operands to the \"-\" operator must be simple (no modifiers)') : invariant(false) : void 0;\n    return checkSimpleExpression('>=' + startVersion, version) && checkSimpleExpression('<=' + endVersion, version);\n  }\n}\n/**\n * Checks if `range` matches `version`. `range` should be a \"simple\" range (ie.\n * not a compound range using the \" - \" or \"||\" operators).\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\n\n\nfunction checkSimpleExpression(range, version) {\n  range = range.trim();\n\n  if (range === '') {\n    return true;\n  }\n\n  var versionComponents = version.split(componentRegex);\n\n  var _getModifierAndCompon = getModifierAndComponents(range),\n      modifier = _getModifierAndCompon.modifier,\n      rangeComponents = _getModifierAndCompon.rangeComponents;\n\n  switch (modifier) {\n    case '<':\n      return checkLessThan(versionComponents, rangeComponents);\n\n    case '<=':\n      return checkLessThanOrEqual(versionComponents, rangeComponents);\n\n    case '>=':\n      return checkGreaterThanOrEqual(versionComponents, rangeComponents);\n\n    case '>':\n      return checkGreaterThan(versionComponents, rangeComponents);\n\n    case '~':\n    case '~>':\n      return checkApproximateVersion(versionComponents, rangeComponents);\n\n    default:\n      return checkEqual(versionComponents, rangeComponents);\n  }\n}\n/**\n * Checks whether `a` is less than `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\n\n\nfunction checkLessThan(a, b) {\n  return compareComponents(a, b) === -1;\n}\n/**\n * Checks whether `a` is less than or equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\n\n\nfunction checkLessThanOrEqual(a, b) {\n  var result = compareComponents(a, b);\n  return result === -1 || result === 0;\n}\n/**\n * Checks whether `a` is equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\n\n\nfunction checkEqual(a, b) {\n  return compareComponents(a, b) === 0;\n}\n/**\n * Checks whether `a` is greater than or equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\n\n\nfunction checkGreaterThanOrEqual(a, b) {\n  var result = compareComponents(a, b);\n  return result === 1 || result === 0;\n}\n/**\n * Checks whether `a` is greater than `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\n\n\nfunction checkGreaterThan(a, b) {\n  return compareComponents(a, b) === 1;\n}\n/**\n * Checks whether `a` is \"reasonably close\" to `b` (as described in\n * https://www.npmjs.org/doc/misc/semver.html). For example, if `b` is \"1.3.1\"\n * then \"reasonably close\" is defined as \">= 1.3.1 and < 1.4\".\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\n\n\nfunction checkApproximateVersion(a, b) {\n  var lowerBound = b.slice();\n  var upperBound = b.slice();\n\n  if (upperBound.length > 1) {\n    upperBound.pop();\n  }\n\n  var lastIndex = upperBound.length - 1;\n  var numeric = parseInt(upperBound[lastIndex], 10);\n\n  if (isNumber(numeric)) {\n    upperBound[lastIndex] = numeric + 1 + '';\n  }\n\n  return checkGreaterThanOrEqual(a, lowerBound) && checkLessThan(a, upperBound);\n}\n/**\n * Extracts the optional modifier (<, <=, =, >=, >, ~, ~>) and version\n * components from `range`.\n *\n * For example, given `range` \">= 1.2.3\" returns an object with a `modifier` of\n * `\">=\"` and `components` of `[1, 2, 3]`.\n *\n * @param {string} range\n * @returns {object}\n */\n\n\nfunction getModifierAndComponents(range) {\n  var rangeComponents = range.split(componentRegex);\n  var matches = rangeComponents[0].match(modifierRegex);\n  !matches ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'expected regex to match but it did not') : invariant(false) : void 0;\n  return {\n    modifier: matches[1],\n    rangeComponents: [matches[2]].concat(rangeComponents.slice(1))\n  };\n}\n/**\n * Determines if `number` is a number.\n *\n * @param {mixed} number\n * @returns {boolean}\n */\n\n\nfunction isNumber(number) {\n  return !isNaN(number) && isFinite(number);\n}\n/**\n * Tests whether `range` is a \"simple\" version number without any modifiers\n * (\">\", \"~\" etc).\n *\n * @param {string} range\n * @returns {boolean}\n */\n\n\nfunction isSimpleVersion(range) {\n  return !getModifierAndComponents(range).modifier;\n}\n/**\n * Zero-pads array `array` until it is at least `length` long.\n *\n * @param {array} array\n * @param {number} length\n */\n\n\nfunction zeroPad(array, length) {\n  for (var i = array.length; i < length; i++) {\n    array[i] = '0';\n  }\n}\n/**\n * Normalizes `a` and `b` in preparation for comparison by doing the following:\n *\n * - zero-pads `a` and `b`\n * - marks any \"x\", \"X\" or \"*\" component in `b` as equivalent by zero-ing it out\n *   in both `a` and `b`\n * - marks any final \"*\" component in `b` as a greedy wildcard by zero-ing it\n *   and all of its successors in `a`\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {array<array<string>>}\n */\n\n\nfunction normalizeVersions(a, b) {\n  a = a.slice();\n  b = b.slice();\n  zeroPad(a, b.length); // mark \"x\" and \"*\" components as equal\n\n  for (var i = 0; i < b.length; i++) {\n    var matches = b[i].match(/^[x*]$/i);\n\n    if (matches) {\n      b[i] = a[i] = '0'; // final \"*\" greedily zeros all remaining components\n\n      if (matches[0] === '*' && i === b.length - 1) {\n        for (var j = i; j < a.length; j++) {\n          a[j] = '0';\n        }\n      }\n    }\n  }\n\n  zeroPad(b, a.length);\n  return [a, b];\n}\n/**\n * Returns the numerical -- not the lexicographical -- ordering of `a` and `b`.\n *\n * For example, `10-alpha` is greater than `2-beta`.\n *\n * @param {string} a\n * @param {string} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\n\n\nfunction compareNumeric(a, b) {\n  var aPrefix = a.match(numericRegex)[1];\n  var bPrefix = b.match(numericRegex)[1];\n  var aNumeric = parseInt(aPrefix, 10);\n  var bNumeric = parseInt(bPrefix, 10);\n\n  if (isNumber(aNumeric) && isNumber(bNumeric) && aNumeric !== bNumeric) {\n    return compare(aNumeric, bNumeric);\n  } else {\n    return compare(a, b);\n  }\n}\n/**\n * Returns the ordering of `a` and `b`.\n *\n * @param {string|number} a\n * @param {string|number} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\n\n\nfunction compare(a, b) {\n  !(typeof a === typeof b) ? process.env.NODE_ENV !== \"production\" ? invariant(false, '\"a\" and \"b\" must be of the same type') : invariant(false) : void 0;\n\n  if (a > b) {\n    return 1;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n/**\n * Compares arrays of version components.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\n\n\nfunction compareComponents(a, b) {\n  var _normalizeVersions = normalizeVersions(a, b),\n      aNormalized = _normalizeVersions[0],\n      bNormalized = _normalizeVersions[1];\n\n  for (var i = 0; i < bNormalized.length; i++) {\n    var result = compareNumeric(aNormalized[i], bNormalized[i]);\n\n    if (result) {\n      return result;\n    }\n  }\n\n  return 0;\n}\n\nvar VersionRange = {\n  /**\n   * Checks whether `version` satisfies the `range` specification.\n   *\n   * We support a subset of the expressions defined in\n   * https://www.npmjs.org/doc/misc/semver.html:\n   *\n   *    version   Must match version exactly\n   *    =version  Same as just version\n   *    >version  Must be greater than version\n   *    >=version Must be greater than or equal to version\n   *    <version  Must be less than version\n   *    <=version Must be less than or equal to version\n   *    ~version  Must be at least version, but less than the next significant\n   *              revision above version:\n   *              \"~1.2.3\" is equivalent to \">= 1.2.3 and < 1.3\"\n   *    ~>version Equivalent to ~version\n   *    1.2.x     Must match \"1.2.x\", where \"x\" is a wildcard that matches\n   *              anything\n   *    1.2.*     Similar to \"1.2.x\", but \"*\" in the trailing position is a\n   *              \"greedy\" wildcard, so will match any number of additional\n   *              components:\n   *              \"1.2.*\" will match \"1.2.1\", \"1.2.1.1\", \"1.2.1.1.1\" etc\n   *    *         Any version\n   *    \"\"        (Empty string) Same as *\n   *    v1 - v2   Equivalent to \">= v1 and <= v2\"\n   *    r1 || r2  Passes if either r1 or r2 are satisfied\n   *\n   * @param {string} range\n   * @param {string} version\n   * @returns {boolean}\n   */\n  contains: function contains(range, version) {\n    return checkOrExpression(range.trim(), version.trim());\n  }\n};\nmodule.exports = VersionRange;"],"mappings":"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"},"metadata":{},"sourceType":"script"}