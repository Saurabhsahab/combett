{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar TEXT_CLIPPING_REGEX = /\\.textClipping$/;\nvar TEXT_TYPES = {\n  'text/plain': true,\n  'text/html': true,\n  'text/rtf': true\n}; // Somewhat arbitrary upper bound on text size. Let's not lock up the browser.\n\nvar TEXT_SIZE_UPPER_BOUND = 5000;\n/**\n * Extract the text content from a file list.\n */\n\nfunction getTextContentFromFiles(files, callback) {\n  var readCount = 0;\n  var results = [];\n  files.forEach(function (\n  /*blob*/\n  file) {\n    readFile(file, function (\n    /*string*/\n    text) {\n      readCount++;\n      text && results.push(text.slice(0, TEXT_SIZE_UPPER_BOUND));\n\n      if (readCount == files.length) {\n        callback(results.join('\\r'));\n      }\n    });\n  });\n}\n/**\n * todo isaac: Do work to turn html/rtf into a content fragment.\n */\n\n\nfunction readFile(file, callback) {\n  if (!global.FileReader || file.type && !(file.type in TEXT_TYPES)) {\n    callback('');\n    return;\n  }\n\n  if (file.type === '') {\n    var _contents = ''; // Special-case text clippings, which have an empty type but include\n    // `.textClipping` in the file name. `readAsText` results in an empty\n    // string for text clippings, so we force the file name to serve\n    // as the text value for the file.\n\n    if (TEXT_CLIPPING_REGEX.test(file.name)) {\n      _contents = file.name.replace(TEXT_CLIPPING_REGEX, '');\n    }\n\n    callback(_contents);\n    return;\n  }\n\n  var reader = new FileReader();\n\n  reader.onload = function () {\n    var result = reader.result;\n    !(typeof result === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'We should be calling \"FileReader.readAsText\" which returns a string') : invariant(false) : void 0;\n    callback(result);\n  };\n\n  reader.onerror = function () {\n    callback('');\n  };\n\n  reader.readAsText(file);\n}\n\nmodule.exports = getTextContentFromFiles;","map":{"version":3,"names":["invariant","require","TEXT_CLIPPING_REGEX","TEXT_TYPES","TEXT_SIZE_UPPER_BOUND","getTextContentFromFiles","files","callback","readCount","results","forEach","file","readFile","text","push","slice","length","join","global","FileReader","type","_contents","test","name","replace","reader","onload","result","process","env","NODE_ENV","onerror","readAsText","module","exports"],"sources":["/home/sudhanshu/Documents/combett/node_modules/draft-js/lib/getTextContentFromFiles.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar TEXT_CLIPPING_REGEX = /\\.textClipping$/;\nvar TEXT_TYPES = {\n  'text/plain': true,\n  'text/html': true,\n  'text/rtf': true\n}; // Somewhat arbitrary upper bound on text size. Let's not lock up the browser.\n\nvar TEXT_SIZE_UPPER_BOUND = 5000;\n/**\n * Extract the text content from a file list.\n */\n\nfunction getTextContentFromFiles(files, callback) {\n  var readCount = 0;\n  var results = [];\n  files.forEach(function (\n  /*blob*/\n  file) {\n    readFile(file, function (\n    /*string*/\n    text) {\n      readCount++;\n      text && results.push(text.slice(0, TEXT_SIZE_UPPER_BOUND));\n\n      if (readCount == files.length) {\n        callback(results.join('\\r'));\n      }\n    });\n  });\n}\n/**\n * todo isaac: Do work to turn html/rtf into a content fragment.\n */\n\n\nfunction readFile(file, callback) {\n  if (!global.FileReader || file.type && !(file.type in TEXT_TYPES)) {\n    callback('');\n    return;\n  }\n\n  if (file.type === '') {\n    var _contents = ''; // Special-case text clippings, which have an empty type but include\n    // `.textClipping` in the file name. `readAsText` results in an empty\n    // string for text clippings, so we force the file name to serve\n    // as the text value for the file.\n\n    if (TEXT_CLIPPING_REGEX.test(file.name)) {\n      _contents = file.name.replace(TEXT_CLIPPING_REGEX, '');\n    }\n\n    callback(_contents);\n    return;\n  }\n\n  var reader = new FileReader();\n\n  reader.onload = function () {\n    var result = reader.result;\n    !(typeof result === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'We should be calling \"FileReader.readAsText\" which returns a string') : invariant(false) : void 0;\n    callback(result);\n  };\n\n  reader.onerror = function () {\n    callback('');\n  };\n\n  reader.readAsText(file);\n}\n\nmodule.exports = getTextContentFromFiles;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAIC,mBAAmB,GAAG,iBAA1B;AACA,IAAIC,UAAU,GAAG;EACf,cAAc,IADC;EAEf,aAAa,IAFE;EAGf,YAAY;AAHG,CAAjB,C,CAIG;;AAEH,IAAIC,qBAAqB,GAAG,IAA5B;AACA;AACA;AACA;;AAEA,SAASC,uBAAT,CAAiCC,KAAjC,EAAwCC,QAAxC,EAAkD;EAChD,IAAIC,SAAS,GAAG,CAAhB;EACA,IAAIC,OAAO,GAAG,EAAd;EACAH,KAAK,CAACI,OAAN,CAAc;EACd;EACAC,IAFc,EAER;IACJC,QAAQ,CAACD,IAAD,EAAO;IACf;IACAE,IAFe,EAET;MACJL,SAAS;MACTK,IAAI,IAAIJ,OAAO,CAACK,IAAR,CAAaD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcX,qBAAd,CAAb,CAAR;;MAEA,IAAII,SAAS,IAAIF,KAAK,CAACU,MAAvB,EAA+B;QAC7BT,QAAQ,CAACE,OAAO,CAACQ,IAAR,CAAa,IAAb,CAAD,CAAR;MACD;IACF,CATO,CAAR;EAUD,CAbD;AAcD;AACD;AACA;AACA;;;AAGA,SAASL,QAAT,CAAkBD,IAAlB,EAAwBJ,QAAxB,EAAkC;EAChC,IAAI,CAACW,MAAM,CAACC,UAAR,IAAsBR,IAAI,CAACS,IAAL,IAAa,EAAET,IAAI,CAACS,IAAL,IAAajB,UAAf,CAAvC,EAAmE;IACjEI,QAAQ,CAAC,EAAD,CAAR;IACA;EACD;;EAED,IAAII,IAAI,CAACS,IAAL,KAAc,EAAlB,EAAsB;IACpB,IAAIC,SAAS,GAAG,EAAhB,CADoB,CACA;IACpB;IACA;IACA;;IAEA,IAAInB,mBAAmB,CAACoB,IAApB,CAAyBX,IAAI,CAACY,IAA9B,CAAJ,EAAyC;MACvCF,SAAS,GAAGV,IAAI,CAACY,IAAL,CAAUC,OAAV,CAAkBtB,mBAAlB,EAAuC,EAAvC,CAAZ;IACD;;IAEDK,QAAQ,CAACc,SAAD,CAAR;IACA;EACD;;EAED,IAAII,MAAM,GAAG,IAAIN,UAAJ,EAAb;;EAEAM,MAAM,CAACC,MAAP,GAAgB,YAAY;IAC1B,IAAIC,MAAM,GAAGF,MAAM,CAACE,MAApB;IACA,EAAE,OAAOA,MAAP,KAAkB,QAApB,IAAgCC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC9B,SAAS,CAAC,KAAD,EAAQ,qEAAR,CAAjD,GAAkIA,SAAS,CAAC,KAAD,CAA3K,GAAqL,KAAK,CAA1L;IACAO,QAAQ,CAACoB,MAAD,CAAR;EACD,CAJD;;EAMAF,MAAM,CAACM,OAAP,GAAiB,YAAY;IAC3BxB,QAAQ,CAAC,EAAD,CAAR;EACD,CAFD;;EAIAkB,MAAM,CAACO,UAAP,CAAkBrB,IAAlB;AACD;;AAEDsB,MAAM,CAACC,OAAP,GAAiB7B,uBAAjB"},"metadata":{},"sourceType":"script"}