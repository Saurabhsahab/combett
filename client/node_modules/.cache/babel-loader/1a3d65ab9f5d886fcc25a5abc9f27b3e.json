{"ast":null,"code":"\"use strict\";\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */\n\n\nvar generateRandomKey = require(\"./generateRandomKey\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar traverseInDepthOrder = function traverseInDepthOrder(blocks, fn) {\n  var stack = [].concat(blocks).reverse();\n\n  while (stack.length) {\n    var _block = stack.pop();\n\n    fn(_block);\n    var children = _block.children;\n    !Array.isArray(children) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Invalid tree raw block') : invariant(false) : void 0;\n    stack = stack.concat([].concat(children.reverse()));\n  }\n};\n\nvar isListBlock = function isListBlock(block) {\n  if (!(block && block.type)) {\n    return false;\n  }\n\n  var type = block.type;\n  return type === 'unordered-list-item' || type === 'ordered-list-item';\n};\n\nvar addDepthToChildren = function addDepthToChildren(block) {\n  if (Array.isArray(block.children)) {\n    block.children = block.children.map(function (child) {\n      return child.type === block.type ? _objectSpread({}, child, {\n        depth: (block.depth || 0) + 1\n      }) : child;\n    });\n  }\n};\n/**\n * This adapter is intended to be be used as an adapter to draft tree data\n *\n * draft state <=====> draft tree state\n */\n\n\nvar DraftTreeAdapter = {\n  /**\n   * Converts from a tree raw state back to draft raw state\n   */\n  fromRawTreeStateToRawState: function fromRawTreeStateToRawState(draftTreeState) {\n    var blocks = draftTreeState.blocks;\n    var transformedBlocks = [];\n    !Array.isArray(blocks) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Invalid raw state') : invariant(false) : void 0;\n\n    if (!Array.isArray(blocks) || !blocks.length) {\n      return draftTreeState;\n    }\n\n    traverseInDepthOrder(blocks, function (block) {\n      var newBlock = _objectSpread({}, block);\n\n      if (isListBlock(block)) {\n        newBlock.depth = newBlock.depth || 0;\n        addDepthToChildren(block); // if it's a non-leaf node, we don't do anything else\n\n        if (block.children != null && block.children.length > 0) {\n          return;\n        }\n      }\n\n      delete newBlock.children;\n      transformedBlocks.push(newBlock);\n    });\n    draftTreeState.blocks = transformedBlocks;\n    return _objectSpread({}, draftTreeState, {\n      blocks: transformedBlocks\n    });\n  },\n\n  /**\n   * Converts from draft raw state to tree draft state\n   */\n  fromRawStateToRawTreeState: function fromRawStateToRawTreeState(draftState) {\n    var transformedBlocks = [];\n    var parentStack = [];\n    draftState.blocks.forEach(function (block) {\n      var isList = isListBlock(block);\n      var depth = block.depth || 0;\n\n      var treeBlock = _objectSpread({}, block, {\n        children: []\n      });\n\n      if (!isList) {\n        transformedBlocks.push(treeBlock);\n        return;\n      }\n\n      var lastParent = parentStack[0]; // block is non-nested & there are no nested blocks, directly push block\n\n      if (lastParent == null && depth === 0) {\n        transformedBlocks.push(treeBlock); // block is first nested block or previous nested block is at a lower level\n      } else if (lastParent == null || lastParent.depth < depth - 1) {\n        // create new parent block\n        var newParent = {\n          key: generateRandomKey(),\n          text: '',\n          depth: depth - 1,\n          type: block.type,\n          children: [],\n          entityRanges: [],\n          inlineStyleRanges: []\n        };\n        parentStack.unshift(newParent);\n\n        if (depth === 1) {\n          // add as a root-level block\n          transformedBlocks.push(newParent);\n        } else if (lastParent != null) {\n          // depth > 1 => also add as previous parent's child\n          lastParent.children.push(newParent);\n        }\n\n        newParent.children.push(treeBlock);\n      } else if (lastParent.depth === depth - 1) {\n        // add as child of last parent\n        lastParent.children.push(treeBlock);\n      } else {\n        // pop out parents at levels above this one from the parent stack\n        while (lastParent != null && lastParent.depth >= depth) {\n          parentStack.shift();\n          lastParent = parentStack[0];\n        }\n\n        if (depth > 0) {\n          lastParent.children.push(treeBlock);\n        } else {\n          transformedBlocks.push(treeBlock);\n        }\n      }\n    });\n    return _objectSpread({}, draftState, {\n      blocks: transformedBlocks\n    });\n  }\n};\nmodule.exports = DraftTreeAdapter;","map":{"version":3,"names":["_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","value","defineProperty","configurable","writable","generateRandomKey","require","invariant","traverseInDepthOrder","blocks","fn","stack","reverse","_block","pop","children","Array","isArray","process","env","NODE_ENV","isListBlock","block","type","addDepthToChildren","map","child","depth","DraftTreeAdapter","fromRawTreeStateToRawState","draftTreeState","transformedBlocks","newBlock","push","fromRawStateToRawTreeState","draftState","parentStack","isList","treeBlock","lastParent","newParent","text","entityRanges","inlineStyleRanges","unshift","shift","module","exports"],"sources":["/home/sudhanshu/Documents/combett/node_modules/draft-js/lib/DraftTreeAdapter.js"],"sourcesContent":["\"use strict\";\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n *\n * This is unstable and not part of the public API and should not be used by\n * production systems. This file may be update/removed without notice.\n */\nvar generateRandomKey = require(\"./generateRandomKey\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar traverseInDepthOrder = function traverseInDepthOrder(blocks, fn) {\n  var stack = [].concat(blocks).reverse();\n\n  while (stack.length) {\n    var _block = stack.pop();\n\n    fn(_block);\n    var children = _block.children;\n    !Array.isArray(children) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Invalid tree raw block') : invariant(false) : void 0;\n    stack = stack.concat([].concat(children.reverse()));\n  }\n};\n\nvar isListBlock = function isListBlock(block) {\n  if (!(block && block.type)) {\n    return false;\n  }\n\n  var type = block.type;\n  return type === 'unordered-list-item' || type === 'ordered-list-item';\n};\n\nvar addDepthToChildren = function addDepthToChildren(block) {\n  if (Array.isArray(block.children)) {\n    block.children = block.children.map(function (child) {\n      return child.type === block.type ? _objectSpread({}, child, {\n        depth: (block.depth || 0) + 1\n      }) : child;\n    });\n  }\n};\n/**\n * This adapter is intended to be be used as an adapter to draft tree data\n *\n * draft state <=====> draft tree state\n */\n\n\nvar DraftTreeAdapter = {\n  /**\n   * Converts from a tree raw state back to draft raw state\n   */\n  fromRawTreeStateToRawState: function fromRawTreeStateToRawState(draftTreeState) {\n    var blocks = draftTreeState.blocks;\n    var transformedBlocks = [];\n    !Array.isArray(blocks) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Invalid raw state') : invariant(false) : void 0;\n\n    if (!Array.isArray(blocks) || !blocks.length) {\n      return draftTreeState;\n    }\n\n    traverseInDepthOrder(blocks, function (block) {\n      var newBlock = _objectSpread({}, block);\n\n      if (isListBlock(block)) {\n        newBlock.depth = newBlock.depth || 0;\n        addDepthToChildren(block); // if it's a non-leaf node, we don't do anything else\n\n        if (block.children != null && block.children.length > 0) {\n          return;\n        }\n      }\n\n      delete newBlock.children;\n      transformedBlocks.push(newBlock);\n    });\n    draftTreeState.blocks = transformedBlocks;\n    return _objectSpread({}, draftTreeState, {\n      blocks: transformedBlocks\n    });\n  },\n\n  /**\n   * Converts from draft raw state to tree draft state\n   */\n  fromRawStateToRawTreeState: function fromRawStateToRawTreeState(draftState) {\n    var transformedBlocks = [];\n    var parentStack = [];\n    draftState.blocks.forEach(function (block) {\n      var isList = isListBlock(block);\n      var depth = block.depth || 0;\n\n      var treeBlock = _objectSpread({}, block, {\n        children: []\n      });\n\n      if (!isList) {\n        transformedBlocks.push(treeBlock);\n        return;\n      }\n\n      var lastParent = parentStack[0]; // block is non-nested & there are no nested blocks, directly push block\n\n      if (lastParent == null && depth === 0) {\n        transformedBlocks.push(treeBlock); // block is first nested block or previous nested block is at a lower level\n      } else if (lastParent == null || lastParent.depth < depth - 1) {\n        // create new parent block\n        var newParent = {\n          key: generateRandomKey(),\n          text: '',\n          depth: depth - 1,\n          type: block.type,\n          children: [],\n          entityRanges: [],\n          inlineStyleRanges: []\n        };\n        parentStack.unshift(newParent);\n\n        if (depth === 1) {\n          // add as a root-level block\n          transformedBlocks.push(newParent);\n        } else if (lastParent != null) {\n          // depth > 1 => also add as previous parent's child\n          lastParent.children.push(newParent);\n        }\n\n        newParent.children.push(treeBlock);\n      } else if (lastParent.depth === depth - 1) {\n        // add as child of last parent\n        lastParent.children.push(treeBlock);\n      } else {\n        // pop out parents at levels above this one from the parent stack\n        while (lastParent != null && lastParent.depth >= depth) {\n          parentStack.shift();\n          lastParent = parentStack[0];\n        }\n\n        if (depth > 0) {\n          lastParent.children.push(treeBlock);\n        } else {\n          transformedBlocks.push(treeBlock);\n        }\n      }\n    });\n    return _objectSpread({}, draftState, {\n      blocks: transformedBlocks\n    });\n  }\n};\nmodule.exports = DraftTreeAdapter;"],"mappings":"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"},"metadata":{},"sourceType":"script"}