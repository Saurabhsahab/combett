{"ast":null,"code":"var _jsxFileName = \"/home/sudhanshu/Documents/combett/src/CreatePost.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport \"./home.css\";\nimport \"./cp.css\";\nimport { Component, PropTypes } from 'react';\nimport RichTextEditor from 'react-rte';\nimport { Editor, EditorState } from 'draft-js';\nimport TextField from '@mui/material/TextField';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CreatePost() {\n  _s();\n\n  const [editorState, setEditorState] = React.useState(() => EditorState.createEmpty());\n  const propTypes = {\n    onChange: PropTypes.func\n  };\n  const state = {\n    value: RichTextEditor.createEmptyValue()\n  };\n\n  let onChange = value => {\n    this.setState({\n      value\n    });\n\n    if (this.props.onChange) {\n      // Send the changes up to the parent component as an HTML string.\n      // This is here to demonstrate using `.toString()` but in a real app it\n      // would be better to avoid generating a string on each change.\n      this.props.onChange(value.toString('html'));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-cont\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cont\",\n      children: [\"Create New Post\", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Topic Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"outlined-basic\",\n        variant: \"filled\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" Describe your Subject well,while keeping the subject as short as possible\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(RichTextEditor, {\n        value: this.state.value,\n        onChange: this.onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreatePost, \"TAqHOLwwmW8k3h3WdII2KbElU4o=\");\n\n_c = CreatePost;\nexport default CreatePost;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreatePost\");","map":{"version":3,"names":["React","Component","PropTypes","RichTextEditor","Editor","EditorState","TextField","useState","CreatePost","editorState","setEditorState","createEmpty","propTypes","onChange","func","state","value","createEmptyValue","setState","props","toString"],"sources":["/home/sudhanshu/Documents/combett/src/CreatePost.js"],"sourcesContent":["import React from 'react'\nimport  \"./home.css\"\nimport  \"./cp.css\"\nimport {Component, PropTypes} from 'react';\nimport RichTextEditor from 'react-rte';\nimport {Editor, EditorState} from 'draft-js';\nimport TextField from '@mui/material/TextField';\nimport { useState } from 'react';\nfunction CreatePost() {\n    const [editorState, setEditorState] = React.useState(\n        () => EditorState.createEmpty(),\n      );\n      const propTypes = {\n        onChange: PropTypes.func\n      };\n    \n      const state = {\n        value: RichTextEditor.createEmptyValue()\n      }\n    \n     let onChange = (value) => {\n        this.setState({value});\n        if (this.props.onChange) {\n          // Send the changes up to the parent component as an HTML string.\n          // This is here to demonstrate using `.toString()` but in a real app it\n          // would be better to avoid generating a string on each change.\n          this.props.onChange(\n            value.toString('html')\n          );\n        }\n      };\n    \n    return (\n        <div className='home-cont'>\n           <div className='cont'>\n               Create New Post\n               <span>Topic Title\n                   </span>\n               {/* <input type={'text'} placeholder=\"title of your post\"/> */}\n               <TextField id=\"outlined-basic\" variant=\"filled\" />\n              <span> Describe your Subject well,while keeping the subject as short as possible</span> \n              <RichTextEditor\n        value={this.state.value}\n        onChange={this.onChange}\n      />\n           </div>\n          \n        </div>\n    )\n}\n\nexport default CreatePost\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAQ,YAAR;AACA,OAAQ,UAAR;AACA,SAAQC,SAAR,EAAmBC,SAAnB,QAAmC,OAAnC;AACA,OAAOC,cAAP,MAA2B,WAA3B;AACA,SAAQC,MAAR,EAAgBC,WAAhB,QAAkC,UAAlC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AACA,SAASC,UAAT,GAAsB;EAAA;;EAClB,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,KAAK,CAACO,QAAN,CAClC,MAAMF,WAAW,CAACM,WAAZ,EAD4B,CAAtC;EAGE,MAAMC,SAAS,GAAG;IAChBC,QAAQ,EAAEX,SAAS,CAACY;EADJ,CAAlB;EAIA,MAAMC,KAAK,GAAG;IACZC,KAAK,EAAEb,cAAc,CAACc,gBAAf;EADK,CAAd;;EAID,IAAIJ,QAAQ,GAAIG,KAAD,IAAW;IACvB,KAAKE,QAAL,CAAc;MAACF;IAAD,CAAd;;IACA,IAAI,KAAKG,KAAL,CAAWN,QAAf,EAAyB;MACvB;MACA;MACA;MACA,KAAKM,KAAL,CAAWN,QAAX,CACEG,KAAK,CAACI,QAAN,CAAe,MAAf,CADF;IAGD;EACF,CAVF;;EAYD,oBACI;IAAK,SAAS,EAAC,WAAf;IAAA,uBACG;MAAK,SAAS,EAAC,MAAf;MAAA,2CAEI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ,eAKI,QAAC,SAAD;QAAW,EAAE,EAAC,gBAAd;QAA+B,OAAO,EAAC;MAAvC;QAAA;QAAA;QAAA;MAAA,QALJ,eAMG;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QANH,eAOG,QAAC,cAAD;QACN,KAAK,EAAE,KAAKL,KAAL,CAAWC,KADZ;QAEN,QAAQ,EAAE,KAAKH;MAFT;QAAA;QAAA;QAAA;MAAA,QAPH;IAAA;MAAA;MAAA;MAAA;IAAA;EADH;IAAA;IAAA;IAAA;EAAA,QADJ;AAiBH;;GAzCQL,U;;KAAAA,U;AA2CT,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}