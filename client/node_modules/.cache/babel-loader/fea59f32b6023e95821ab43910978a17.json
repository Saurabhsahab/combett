{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar BlockTree = require(\"./BlockTree\");\n\nvar ContentState = require(\"./ContentState\");\n\nvar EditorBidiService = require(\"./EditorBidiService\");\n\nvar SelectionState = require(\"./SelectionState\");\n\nvar Immutable = require(\"immutable\");\n\nvar OrderedSet = Immutable.OrderedSet,\n    Record = Immutable.Record,\n    Stack = Immutable.Stack,\n    OrderedMap = Immutable.OrderedMap,\n    List = Immutable.List; // When configuring an editor, the user can chose to provide or not provide\n// basically all keys. `currentContent` varies, so this type doesn't include it.\n// (See the types defined below.)\n\nvar defaultRecord = {\n  allowUndo: true,\n  currentContent: null,\n  decorator: null,\n  directionMap: null,\n  forceSelection: false,\n  inCompositionMode: false,\n  inlineStyleOverride: null,\n  lastChangeType: null,\n  nativelyRenderedContent: null,\n  redoStack: Stack(),\n  selection: null,\n  treeMap: null,\n  undoStack: Stack()\n};\nvar EditorStateRecord = Record(defaultRecord);\n\nvar EditorState = /*#__PURE__*/function () {\n  EditorState.createEmpty = function createEmpty(decorator) {\n    return this.createWithText('', decorator);\n  };\n\n  EditorState.createWithText = function createWithText(text, decorator) {\n    return EditorState.createWithContent(ContentState.createFromText(text), decorator);\n  };\n\n  EditorState.createWithContent = function createWithContent(contentState, decorator) {\n    if (contentState.getBlockMap().count() === 0) {\n      return EditorState.createEmpty(decorator);\n    }\n\n    var firstKey = contentState.getBlockMap().first().getKey();\n    return EditorState.create({\n      currentContent: contentState,\n      undoStack: Stack(),\n      redoStack: Stack(),\n      decorator: decorator || null,\n      selection: SelectionState.createEmpty(firstKey)\n    });\n  };\n\n  EditorState.create = function create(config) {\n    var currentContent = config.currentContent,\n        decorator = config.decorator;\n\n    var recordConfig = _objectSpread({}, config, {\n      treeMap: generateNewTreeMap(currentContent, decorator),\n      directionMap: EditorBidiService.getDirectionMap(currentContent)\n    });\n\n    return new EditorState(new EditorStateRecord(recordConfig));\n  };\n\n  EditorState.fromJS = function fromJS(config) {\n    return new EditorState(new EditorStateRecord(_objectSpread({}, config, {\n      directionMap: config.directionMap != null ? OrderedMap(config.directionMap) : config.directionMap,\n      inlineStyleOverride: config.inlineStyleOverride != null ? OrderedSet(config.inlineStyleOverride) : config.inlineStyleOverride,\n      nativelyRenderedContent: config.nativelyRenderedContent != null ? ContentState.fromJS(config.nativelyRenderedContent) : config.nativelyRenderedContent,\n      redoStack: config.redoStack != null ? Stack(config.redoStack.map(function (v) {\n        return ContentState.fromJS(v);\n      })) : config.redoStack,\n      selection: config.selection != null ? new SelectionState(config.selection) : config.selection,\n      treeMap: config.treeMap != null ? OrderedMap(config.treeMap).map(function (v) {\n        return List(v).map(function (v) {\n          return BlockTree.fromJS(v);\n        });\n      }) : config.treeMap,\n      undoStack: config.undoStack != null ? Stack(config.undoStack.map(function (v) {\n        return ContentState.fromJS(v);\n      })) : config.undoStack,\n      currentContent: ContentState.fromJS(config.currentContent)\n    })));\n  };\n\n  EditorState.set = function set(editorState, put) {\n    var map = editorState.getImmutable().withMutations(function (state) {\n      var existingDecorator = state.get('decorator');\n      var decorator = existingDecorator;\n\n      if (put.decorator === null) {\n        decorator = null;\n      } else if (put.decorator) {\n        decorator = put.decorator;\n      }\n\n      var newContent = put.currentContent || editorState.getCurrentContent();\n\n      if (decorator !== existingDecorator) {\n        var treeMap = state.get('treeMap');\n        var newTreeMap;\n\n        if (decorator && existingDecorator) {\n          newTreeMap = regenerateTreeForNewDecorator(newContent, newContent.getBlockMap(), treeMap, decorator, existingDecorator);\n        } else {\n          newTreeMap = generateNewTreeMap(newContent, decorator);\n        }\n\n        state.merge({\n          decorator: decorator,\n          treeMap: newTreeMap,\n          nativelyRenderedContent: null\n        });\n        return;\n      }\n\n      var existingContent = editorState.getCurrentContent();\n\n      if (newContent !== existingContent) {\n        state.set('treeMap', regenerateTreeForNewBlocks(editorState, newContent.getBlockMap(), newContent.getEntityMap(), decorator));\n      }\n\n      state.merge(put);\n    });\n    return new EditorState(map);\n  };\n\n  var _proto = EditorState.prototype;\n\n  _proto.toJS = function toJS() {\n    return this.getImmutable().toJS();\n  };\n\n  _proto.getAllowUndo = function getAllowUndo() {\n    return this.getImmutable().get('allowUndo');\n  };\n\n  _proto.getCurrentContent = function getCurrentContent() {\n    return this.getImmutable().get('currentContent');\n  };\n\n  _proto.getUndoStack = function getUndoStack() {\n    return this.getImmutable().get('undoStack');\n  };\n\n  _proto.getRedoStack = function getRedoStack() {\n    return this.getImmutable().get('redoStack');\n  };\n\n  _proto.getSelection = function getSelection() {\n    return this.getImmutable().get('selection');\n  };\n\n  _proto.getDecorator = function getDecorator() {\n    return this.getImmutable().get('decorator');\n  };\n\n  _proto.isInCompositionMode = function isInCompositionMode() {\n    return this.getImmutable().get('inCompositionMode');\n  };\n\n  _proto.mustForceSelection = function mustForceSelection() {\n    return this.getImmutable().get('forceSelection');\n  };\n\n  _proto.getNativelyRenderedContent = function getNativelyRenderedContent() {\n    return this.getImmutable().get('nativelyRenderedContent');\n  };\n\n  _proto.getLastChangeType = function getLastChangeType() {\n    return this.getImmutable().get('lastChangeType');\n  }\n  /**\n   * While editing, the user may apply inline style commands with a collapsed\n   * cursor, intending to type text that adopts the specified style. In this\n   * case, we track the specified style as an \"override\" that takes precedence\n   * over the inline style of the text adjacent to the cursor.\n   *\n   * If null, there is no override in place.\n   */\n  ;\n\n  _proto.getInlineStyleOverride = function getInlineStyleOverride() {\n    return this.getImmutable().get('inlineStyleOverride');\n  };\n\n  EditorState.setInlineStyleOverride = function setInlineStyleOverride(editorState, inlineStyleOverride) {\n    return EditorState.set(editorState, {\n      inlineStyleOverride: inlineStyleOverride\n    });\n  }\n  /**\n   * Get the appropriate inline style for the editor state. If an\n   * override is in place, use it. Otherwise, the current style is\n   * based on the location of the selection state.\n   */\n  ;\n\n  _proto.getCurrentInlineStyle = function getCurrentInlineStyle() {\n    var override = this.getInlineStyleOverride();\n\n    if (override != null) {\n      return override;\n    }\n\n    var content = this.getCurrentContent();\n    var selection = this.getSelection();\n\n    if (selection.isCollapsed()) {\n      return getInlineStyleForCollapsedSelection(content, selection);\n    }\n\n    return getInlineStyleForNonCollapsedSelection(content, selection);\n  };\n\n  _proto.getBlockTree = function getBlockTree(blockKey) {\n    return this.getImmutable().getIn(['treeMap', blockKey]);\n  };\n\n  _proto.isSelectionAtStartOfContent = function isSelectionAtStartOfContent() {\n    var firstKey = this.getCurrentContent().getBlockMap().first().getKey();\n    return this.getSelection().hasEdgeWithin(firstKey, 0, 0);\n  };\n\n  _proto.isSelectionAtEndOfContent = function isSelectionAtEndOfContent() {\n    var content = this.getCurrentContent();\n    var blockMap = content.getBlockMap();\n    var last = blockMap.last();\n    var end = last.getLength();\n    return this.getSelection().hasEdgeWithin(last.getKey(), end, end);\n  };\n\n  _proto.getDirectionMap = function getDirectionMap() {\n    return this.getImmutable().get('directionMap');\n  }\n  /**\n   * Incorporate native DOM selection changes into the EditorState. This\n   * method can be used when we simply want to accept whatever the DOM\n   * has given us to represent selection, and we do not need to re-render\n   * the editor.\n   *\n   * To forcibly move the DOM selection, see `EditorState.forceSelection`.\n   */\n  ;\n\n  EditorState.acceptSelection = function acceptSelection(editorState, selection) {\n    return updateSelection(editorState, selection, false);\n  }\n  /**\n   * At times, we need to force the DOM selection to be where we\n   * need it to be. This can occur when the anchor or focus nodes\n   * are non-text nodes, for instance. In this case, we want to trigger\n   * a re-render of the editor, which in turn forces selection into\n   * the correct place in the DOM. The `forceSelection` method\n   * accomplishes this.\n   *\n   * This method should be used in cases where you need to explicitly\n   * move the DOM selection from one place to another without a change\n   * in ContentState.\n   */\n  ;\n\n  EditorState.forceSelection = function forceSelection(editorState, selection) {\n    if (!selection.getHasFocus()) {\n      selection = selection.set('hasFocus', true);\n    }\n\n    return updateSelection(editorState, selection, true);\n  }\n  /**\n   * Move selection to the end of the editor without forcing focus.\n   */\n  ;\n\n  EditorState.moveSelectionToEnd = function moveSelectionToEnd(editorState) {\n    var content = editorState.getCurrentContent();\n    var lastBlock = content.getLastBlock();\n    var lastKey = lastBlock.getKey();\n    var length = lastBlock.getLength();\n    return EditorState.acceptSelection(editorState, new SelectionState({\n      anchorKey: lastKey,\n      anchorOffset: length,\n      focusKey: lastKey,\n      focusOffset: length,\n      isBackward: false\n    }));\n  }\n  /**\n   * Force focus to the end of the editor. This is useful in scenarios\n   * where we want to programmatically focus the input and it makes sense\n   * to allow the user to continue working seamlessly.\n   */\n  ;\n\n  EditorState.moveFocusToEnd = function moveFocusToEnd(editorState) {\n    var afterSelectionMove = EditorState.moveSelectionToEnd(editorState);\n    return EditorState.forceSelection(afterSelectionMove, afterSelectionMove.getSelection());\n  }\n  /**\n   * Push the current ContentState onto the undo stack if it should be\n   * considered a boundary state, and set the provided ContentState as the\n   * new current content.\n   */\n  ;\n\n  EditorState.push = function push(editorState, contentState, changeType) {\n    var forceSelection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    if (editorState.getCurrentContent() === contentState) {\n      return editorState;\n    }\n\n    var directionMap = EditorBidiService.getDirectionMap(contentState, editorState.getDirectionMap());\n\n    if (!editorState.getAllowUndo()) {\n      return EditorState.set(editorState, {\n        currentContent: contentState,\n        directionMap: directionMap,\n        lastChangeType: changeType,\n        selection: contentState.getSelectionAfter(),\n        forceSelection: forceSelection,\n        inlineStyleOverride: null\n      });\n    }\n\n    var selection = editorState.getSelection();\n    var currentContent = editorState.getCurrentContent();\n    var undoStack = editorState.getUndoStack();\n    var newContent = contentState;\n\n    if (selection !== currentContent.getSelectionAfter() || mustBecomeBoundary(editorState, changeType)) {\n      undoStack = undoStack.push(currentContent);\n      newContent = newContent.set('selectionBefore', selection);\n    } else if (changeType === 'insert-characters' || changeType === 'backspace-character' || changeType === 'delete-character') {\n      // Preserve the previous selection.\n      newContent = newContent.set('selectionBefore', currentContent.getSelectionBefore());\n    }\n\n    var inlineStyleOverride = editorState.getInlineStyleOverride(); // Don't discard inline style overrides for the following change types:\n\n    var overrideChangeTypes = ['adjust-depth', 'change-block-type', 'split-block'];\n\n    if (overrideChangeTypes.indexOf(changeType) === -1) {\n      inlineStyleOverride = null;\n    }\n\n    var editorStateChanges = {\n      currentContent: newContent,\n      directionMap: directionMap,\n      undoStack: undoStack,\n      redoStack: Stack(),\n      lastChangeType: changeType,\n      selection: contentState.getSelectionAfter(),\n      forceSelection: forceSelection,\n      inlineStyleOverride: inlineStyleOverride\n    };\n    return EditorState.set(editorState, editorStateChanges);\n  }\n  /**\n   * Make the top ContentState in the undo stack the new current content and\n   * push the current content onto the redo stack.\n   */\n  ;\n\n  EditorState.undo = function undo(editorState) {\n    if (!editorState.getAllowUndo()) {\n      return editorState;\n    }\n\n    var undoStack = editorState.getUndoStack();\n    var newCurrentContent = undoStack.peek();\n\n    if (!newCurrentContent) {\n      return editorState;\n    }\n\n    var currentContent = editorState.getCurrentContent();\n    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n    return EditorState.set(editorState, {\n      currentContent: newCurrentContent,\n      directionMap: directionMap,\n      undoStack: undoStack.shift(),\n      redoStack: editorState.getRedoStack().push(currentContent),\n      forceSelection: true,\n      inlineStyleOverride: null,\n      lastChangeType: 'undo',\n      nativelyRenderedContent: null,\n      selection: currentContent.getSelectionBefore()\n    });\n  }\n  /**\n   * Make the top ContentState in the redo stack the new current content and\n   * push the current content onto the undo stack.\n   */\n  ;\n\n  EditorState.redo = function redo(editorState) {\n    if (!editorState.getAllowUndo()) {\n      return editorState;\n    }\n\n    var redoStack = editorState.getRedoStack();\n    var newCurrentContent = redoStack.peek();\n\n    if (!newCurrentContent) {\n      return editorState;\n    }\n\n    var currentContent = editorState.getCurrentContent();\n    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n    return EditorState.set(editorState, {\n      currentContent: newCurrentContent,\n      directionMap: directionMap,\n      undoStack: editorState.getUndoStack().push(currentContent),\n      redoStack: redoStack.shift(),\n      forceSelection: true,\n      inlineStyleOverride: null,\n      lastChangeType: 'redo',\n      nativelyRenderedContent: null,\n      selection: newCurrentContent.getSelectionAfter()\n    });\n  }\n  /**\n   * Not for public consumption.\n   */\n  ;\n\n  function EditorState(immutable) {\n    _defineProperty(this, \"_immutable\", void 0);\n\n    this._immutable = immutable;\n  }\n  /**\n   * Not for public consumption.\n   */\n\n\n  _proto.getImmutable = function getImmutable() {\n    return this._immutable;\n  };\n\n  return EditorState;\n}();\n/**\n * Set the supplied SelectionState as the new current selection, and set\n * the `force` flag to trigger manual selection placement by the view.\n */\n\n\nfunction updateSelection(editorState, selection, forceSelection) {\n  return EditorState.set(editorState, {\n    selection: selection,\n    forceSelection: forceSelection,\n    nativelyRenderedContent: null,\n    inlineStyleOverride: null\n  });\n}\n/**\n * Regenerate the entire tree map for a given ContentState and decorator.\n * Returns an OrderedMap that maps all available ContentBlock objects.\n */\n\n\nfunction generateNewTreeMap(contentState, decorator) {\n  return contentState.getBlockMap().map(function (block) {\n    return BlockTree.generate(contentState, block, decorator);\n  }).toOrderedMap();\n}\n/**\n * Regenerate tree map objects for all ContentBlocks that have changed\n * between the current editorState and newContent. Returns an OrderedMap\n * with only changed regenerated tree map objects.\n */\n\n\nfunction regenerateTreeForNewBlocks(editorState, newBlockMap, newEntityMap, decorator) {\n  var contentState = editorState.getCurrentContent().set('entityMap', newEntityMap);\n  var prevBlockMap = contentState.getBlockMap();\n  var prevTreeMap = editorState.getImmutable().get('treeMap');\n  return prevTreeMap.merge(newBlockMap.toSeq().filter(function (block, key) {\n    return block !== prevBlockMap.get(key);\n  }).map(function (block) {\n    return BlockTree.generate(contentState, block, decorator);\n  }));\n}\n/**\n * Generate tree map objects for a new decorator object, preserving any\n * decorations that are unchanged from the previous decorator.\n *\n * Note that in order for this to perform optimally, decoration Lists for\n * decorators should be preserved when possible to allow for direct immutable\n * List comparison.\n */\n\n\nfunction regenerateTreeForNewDecorator(content, blockMap, previousTreeMap, decorator, existingDecorator) {\n  return previousTreeMap.merge(blockMap.toSeq().filter(function (block) {\n    return decorator.getDecorations(block, content) !== existingDecorator.getDecorations(block, content);\n  }).map(function (block) {\n    return BlockTree.generate(content, block, decorator);\n  }));\n}\n/**\n * Return whether a change should be considered a boundary state, given\n * the previous change type. Allows us to discard potential boundary states\n * during standard typing or deletion behavior.\n */\n\n\nfunction mustBecomeBoundary(editorState, changeType) {\n  var lastChangeType = editorState.getLastChangeType();\n  return changeType !== lastChangeType || changeType !== 'insert-characters' && changeType !== 'backspace-character' && changeType !== 'delete-character';\n}\n\nfunction getInlineStyleForCollapsedSelection(content, selection) {\n  var startKey = selection.getStartKey();\n  var startOffset = selection.getStartOffset();\n  var startBlock = content.getBlockForKey(startKey); // If the cursor is not at the start of the block, look backward to\n  // preserve the style of the preceding character.\n\n  if (startOffset > 0) {\n    return startBlock.getInlineStyleAt(startOffset - 1);\n  } // The caret is at position zero in this block. If the block has any\n  // text at all, use the style of the first character.\n\n\n  if (startBlock.getLength()) {\n    return startBlock.getInlineStyleAt(0);\n  } // Otherwise, look upward in the document to find the closest character.\n\n\n  return lookUpwardForInlineStyle(content, startKey);\n}\n\nfunction getInlineStyleForNonCollapsedSelection(content, selection) {\n  var startKey = selection.getStartKey();\n  var startOffset = selection.getStartOffset();\n  var startBlock = content.getBlockForKey(startKey); // If there is a character just inside the selection, use its style.\n\n  if (startOffset < startBlock.getLength()) {\n    return startBlock.getInlineStyleAt(startOffset);\n  } // Check if the selection at the end of a non-empty block. Use the last\n  // style in the block.\n\n\n  if (startOffset > 0) {\n    return startBlock.getInlineStyleAt(startOffset - 1);\n  } // Otherwise, look upward in the document to find the closest character.\n\n\n  return lookUpwardForInlineStyle(content, startKey);\n}\n\nfunction lookUpwardForInlineStyle(content, fromKey) {\n  var lastNonEmpty = content.getBlockMap().reverse().skipUntil(function (_, k) {\n    return k === fromKey;\n  }).skip(1).skipUntil(function (block, _) {\n    return block.getLength();\n  }).first();\n\n  if (lastNonEmpty) {\n    return lastNonEmpty.getInlineStyleAt(lastNonEmpty.getLength() - 1);\n  }\n\n  return OrderedSet();\n}\n\nmodule.exports = EditorState;","map":{"version":3,"names":["_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","value","defineProperty","configurable","writable","BlockTree","require","ContentState","EditorBidiService","SelectionState","Immutable","OrderedSet","Record","Stack","OrderedMap","List","defaultRecord","allowUndo","currentContent","decorator","directionMap","forceSelection","inCompositionMode","inlineStyleOverride","lastChangeType","nativelyRenderedContent","redoStack","selection","treeMap","undoStack","EditorStateRecord","EditorState","createEmpty","createWithText","text","createWithContent","createFromText","contentState","getBlockMap","count","firstKey","first","getKey","create","config","recordConfig","generateNewTreeMap","getDirectionMap","fromJS","map","v","set","editorState","put","getImmutable","withMutations","state","existingDecorator","get","newContent","getCurrentContent","newTreeMap","regenerateTreeForNewDecorator","merge","existingContent","regenerateTreeForNewBlocks","getEntityMap","_proto","prototype","toJS","getAllowUndo","getUndoStack","getRedoStack","getSelection","getDecorator","isInCompositionMode","mustForceSelection","getNativelyRenderedContent","getLastChangeType","getInlineStyleOverride","setInlineStyleOverride","getCurrentInlineStyle","override","content","isCollapsed","getInlineStyleForCollapsedSelection","getInlineStyleForNonCollapsedSelection","getBlockTree","blockKey","getIn","isSelectionAtStartOfContent","hasEdgeWithin","isSelectionAtEndOfContent","blockMap","last","end","getLength","acceptSelection","updateSelection","getHasFocus","moveSelectionToEnd","lastBlock","getLastBlock","lastKey","anchorKey","anchorOffset","focusKey","focusOffset","isBackward","moveFocusToEnd","afterSelectionMove","push","changeType","undefined","getSelectionAfter","mustBecomeBoundary","getSelectionBefore","overrideChangeTypes","indexOf","editorStateChanges","undo","newCurrentContent","peek","shift","redo","immutable","_immutable","block","generate","toOrderedMap","newBlockMap","newEntityMap","prevBlockMap","prevTreeMap","toSeq","previousTreeMap","getDecorations","startKey","getStartKey","startOffset","getStartOffset","startBlock","getBlockForKey","getInlineStyleAt","lookUpwardForInlineStyle","fromKey","lastNonEmpty","reverse","skipUntil","_","k","skip","module","exports"],"sources":["/home/sudhanshu/Documents/combett/node_modules/draft-js/lib/EditorState.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar BlockTree = require(\"./BlockTree\");\n\nvar ContentState = require(\"./ContentState\");\n\nvar EditorBidiService = require(\"./EditorBidiService\");\n\nvar SelectionState = require(\"./SelectionState\");\n\nvar Immutable = require(\"immutable\");\n\nvar OrderedSet = Immutable.OrderedSet,\n    Record = Immutable.Record,\n    Stack = Immutable.Stack,\n    OrderedMap = Immutable.OrderedMap,\n    List = Immutable.List; // When configuring an editor, the user can chose to provide or not provide\n// basically all keys. `currentContent` varies, so this type doesn't include it.\n// (See the types defined below.)\n\nvar defaultRecord = {\n  allowUndo: true,\n  currentContent: null,\n  decorator: null,\n  directionMap: null,\n  forceSelection: false,\n  inCompositionMode: false,\n  inlineStyleOverride: null,\n  lastChangeType: null,\n  nativelyRenderedContent: null,\n  redoStack: Stack(),\n  selection: null,\n  treeMap: null,\n  undoStack: Stack()\n};\nvar EditorStateRecord = Record(defaultRecord);\n\nvar EditorState = /*#__PURE__*/function () {\n  EditorState.createEmpty = function createEmpty(decorator) {\n    return this.createWithText('', decorator);\n  };\n\n  EditorState.createWithText = function createWithText(text, decorator) {\n    return EditorState.createWithContent(ContentState.createFromText(text), decorator);\n  };\n\n  EditorState.createWithContent = function createWithContent(contentState, decorator) {\n    if (contentState.getBlockMap().count() === 0) {\n      return EditorState.createEmpty(decorator);\n    }\n\n    var firstKey = contentState.getBlockMap().first().getKey();\n    return EditorState.create({\n      currentContent: contentState,\n      undoStack: Stack(),\n      redoStack: Stack(),\n      decorator: decorator || null,\n      selection: SelectionState.createEmpty(firstKey)\n    });\n  };\n\n  EditorState.create = function create(config) {\n    var currentContent = config.currentContent,\n        decorator = config.decorator;\n\n    var recordConfig = _objectSpread({}, config, {\n      treeMap: generateNewTreeMap(currentContent, decorator),\n      directionMap: EditorBidiService.getDirectionMap(currentContent)\n    });\n\n    return new EditorState(new EditorStateRecord(recordConfig));\n  };\n\n  EditorState.fromJS = function fromJS(config) {\n    return new EditorState(new EditorStateRecord(_objectSpread({}, config, {\n      directionMap: config.directionMap != null ? OrderedMap(config.directionMap) : config.directionMap,\n      inlineStyleOverride: config.inlineStyleOverride != null ? OrderedSet(config.inlineStyleOverride) : config.inlineStyleOverride,\n      nativelyRenderedContent: config.nativelyRenderedContent != null ? ContentState.fromJS(config.nativelyRenderedContent) : config.nativelyRenderedContent,\n      redoStack: config.redoStack != null ? Stack(config.redoStack.map(function (v) {\n        return ContentState.fromJS(v);\n      })) : config.redoStack,\n      selection: config.selection != null ? new SelectionState(config.selection) : config.selection,\n      treeMap: config.treeMap != null ? OrderedMap(config.treeMap).map(function (v) {\n        return List(v).map(function (v) {\n          return BlockTree.fromJS(v);\n        });\n      }) : config.treeMap,\n      undoStack: config.undoStack != null ? Stack(config.undoStack.map(function (v) {\n        return ContentState.fromJS(v);\n      })) : config.undoStack,\n      currentContent: ContentState.fromJS(config.currentContent)\n    })));\n  };\n\n  EditorState.set = function set(editorState, put) {\n    var map = editorState.getImmutable().withMutations(function (state) {\n      var existingDecorator = state.get('decorator');\n      var decorator = existingDecorator;\n\n      if (put.decorator === null) {\n        decorator = null;\n      } else if (put.decorator) {\n        decorator = put.decorator;\n      }\n\n      var newContent = put.currentContent || editorState.getCurrentContent();\n\n      if (decorator !== existingDecorator) {\n        var treeMap = state.get('treeMap');\n        var newTreeMap;\n\n        if (decorator && existingDecorator) {\n          newTreeMap = regenerateTreeForNewDecorator(newContent, newContent.getBlockMap(), treeMap, decorator, existingDecorator);\n        } else {\n          newTreeMap = generateNewTreeMap(newContent, decorator);\n        }\n\n        state.merge({\n          decorator: decorator,\n          treeMap: newTreeMap,\n          nativelyRenderedContent: null\n        });\n        return;\n      }\n\n      var existingContent = editorState.getCurrentContent();\n\n      if (newContent !== existingContent) {\n        state.set('treeMap', regenerateTreeForNewBlocks(editorState, newContent.getBlockMap(), newContent.getEntityMap(), decorator));\n      }\n\n      state.merge(put);\n    });\n    return new EditorState(map);\n  };\n\n  var _proto = EditorState.prototype;\n\n  _proto.toJS = function toJS() {\n    return this.getImmutable().toJS();\n  };\n\n  _proto.getAllowUndo = function getAllowUndo() {\n    return this.getImmutable().get('allowUndo');\n  };\n\n  _proto.getCurrentContent = function getCurrentContent() {\n    return this.getImmutable().get('currentContent');\n  };\n\n  _proto.getUndoStack = function getUndoStack() {\n    return this.getImmutable().get('undoStack');\n  };\n\n  _proto.getRedoStack = function getRedoStack() {\n    return this.getImmutable().get('redoStack');\n  };\n\n  _proto.getSelection = function getSelection() {\n    return this.getImmutable().get('selection');\n  };\n\n  _proto.getDecorator = function getDecorator() {\n    return this.getImmutable().get('decorator');\n  };\n\n  _proto.isInCompositionMode = function isInCompositionMode() {\n    return this.getImmutable().get('inCompositionMode');\n  };\n\n  _proto.mustForceSelection = function mustForceSelection() {\n    return this.getImmutable().get('forceSelection');\n  };\n\n  _proto.getNativelyRenderedContent = function getNativelyRenderedContent() {\n    return this.getImmutable().get('nativelyRenderedContent');\n  };\n\n  _proto.getLastChangeType = function getLastChangeType() {\n    return this.getImmutable().get('lastChangeType');\n  }\n  /**\n   * While editing, the user may apply inline style commands with a collapsed\n   * cursor, intending to type text that adopts the specified style. In this\n   * case, we track the specified style as an \"override\" that takes precedence\n   * over the inline style of the text adjacent to the cursor.\n   *\n   * If null, there is no override in place.\n   */\n  ;\n\n  _proto.getInlineStyleOverride = function getInlineStyleOverride() {\n    return this.getImmutable().get('inlineStyleOverride');\n  };\n\n  EditorState.setInlineStyleOverride = function setInlineStyleOverride(editorState, inlineStyleOverride) {\n    return EditorState.set(editorState, {\n      inlineStyleOverride: inlineStyleOverride\n    });\n  }\n  /**\n   * Get the appropriate inline style for the editor state. If an\n   * override is in place, use it. Otherwise, the current style is\n   * based on the location of the selection state.\n   */\n  ;\n\n  _proto.getCurrentInlineStyle = function getCurrentInlineStyle() {\n    var override = this.getInlineStyleOverride();\n\n    if (override != null) {\n      return override;\n    }\n\n    var content = this.getCurrentContent();\n    var selection = this.getSelection();\n\n    if (selection.isCollapsed()) {\n      return getInlineStyleForCollapsedSelection(content, selection);\n    }\n\n    return getInlineStyleForNonCollapsedSelection(content, selection);\n  };\n\n  _proto.getBlockTree = function getBlockTree(blockKey) {\n    return this.getImmutable().getIn(['treeMap', blockKey]);\n  };\n\n  _proto.isSelectionAtStartOfContent = function isSelectionAtStartOfContent() {\n    var firstKey = this.getCurrentContent().getBlockMap().first().getKey();\n    return this.getSelection().hasEdgeWithin(firstKey, 0, 0);\n  };\n\n  _proto.isSelectionAtEndOfContent = function isSelectionAtEndOfContent() {\n    var content = this.getCurrentContent();\n    var blockMap = content.getBlockMap();\n    var last = blockMap.last();\n    var end = last.getLength();\n    return this.getSelection().hasEdgeWithin(last.getKey(), end, end);\n  };\n\n  _proto.getDirectionMap = function getDirectionMap() {\n    return this.getImmutable().get('directionMap');\n  }\n  /**\n   * Incorporate native DOM selection changes into the EditorState. This\n   * method can be used when we simply want to accept whatever the DOM\n   * has given us to represent selection, and we do not need to re-render\n   * the editor.\n   *\n   * To forcibly move the DOM selection, see `EditorState.forceSelection`.\n   */\n  ;\n\n  EditorState.acceptSelection = function acceptSelection(editorState, selection) {\n    return updateSelection(editorState, selection, false);\n  }\n  /**\n   * At times, we need to force the DOM selection to be where we\n   * need it to be. This can occur when the anchor or focus nodes\n   * are non-text nodes, for instance. In this case, we want to trigger\n   * a re-render of the editor, which in turn forces selection into\n   * the correct place in the DOM. The `forceSelection` method\n   * accomplishes this.\n   *\n   * This method should be used in cases where you need to explicitly\n   * move the DOM selection from one place to another without a change\n   * in ContentState.\n   */\n  ;\n\n  EditorState.forceSelection = function forceSelection(editorState, selection) {\n    if (!selection.getHasFocus()) {\n      selection = selection.set('hasFocus', true);\n    }\n\n    return updateSelection(editorState, selection, true);\n  }\n  /**\n   * Move selection to the end of the editor without forcing focus.\n   */\n  ;\n\n  EditorState.moveSelectionToEnd = function moveSelectionToEnd(editorState) {\n    var content = editorState.getCurrentContent();\n    var lastBlock = content.getLastBlock();\n    var lastKey = lastBlock.getKey();\n    var length = lastBlock.getLength();\n    return EditorState.acceptSelection(editorState, new SelectionState({\n      anchorKey: lastKey,\n      anchorOffset: length,\n      focusKey: lastKey,\n      focusOffset: length,\n      isBackward: false\n    }));\n  }\n  /**\n   * Force focus to the end of the editor. This is useful in scenarios\n   * where we want to programmatically focus the input and it makes sense\n   * to allow the user to continue working seamlessly.\n   */\n  ;\n\n  EditorState.moveFocusToEnd = function moveFocusToEnd(editorState) {\n    var afterSelectionMove = EditorState.moveSelectionToEnd(editorState);\n    return EditorState.forceSelection(afterSelectionMove, afterSelectionMove.getSelection());\n  }\n  /**\n   * Push the current ContentState onto the undo stack if it should be\n   * considered a boundary state, and set the provided ContentState as the\n   * new current content.\n   */\n  ;\n\n  EditorState.push = function push(editorState, contentState, changeType) {\n    var forceSelection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    if (editorState.getCurrentContent() === contentState) {\n      return editorState;\n    }\n\n    var directionMap = EditorBidiService.getDirectionMap(contentState, editorState.getDirectionMap());\n\n    if (!editorState.getAllowUndo()) {\n      return EditorState.set(editorState, {\n        currentContent: contentState,\n        directionMap: directionMap,\n        lastChangeType: changeType,\n        selection: contentState.getSelectionAfter(),\n        forceSelection: forceSelection,\n        inlineStyleOverride: null\n      });\n    }\n\n    var selection = editorState.getSelection();\n    var currentContent = editorState.getCurrentContent();\n    var undoStack = editorState.getUndoStack();\n    var newContent = contentState;\n\n    if (selection !== currentContent.getSelectionAfter() || mustBecomeBoundary(editorState, changeType)) {\n      undoStack = undoStack.push(currentContent);\n      newContent = newContent.set('selectionBefore', selection);\n    } else if (changeType === 'insert-characters' || changeType === 'backspace-character' || changeType === 'delete-character') {\n      // Preserve the previous selection.\n      newContent = newContent.set('selectionBefore', currentContent.getSelectionBefore());\n    }\n\n    var inlineStyleOverride = editorState.getInlineStyleOverride(); // Don't discard inline style overrides for the following change types:\n\n    var overrideChangeTypes = ['adjust-depth', 'change-block-type', 'split-block'];\n\n    if (overrideChangeTypes.indexOf(changeType) === -1) {\n      inlineStyleOverride = null;\n    }\n\n    var editorStateChanges = {\n      currentContent: newContent,\n      directionMap: directionMap,\n      undoStack: undoStack,\n      redoStack: Stack(),\n      lastChangeType: changeType,\n      selection: contentState.getSelectionAfter(),\n      forceSelection: forceSelection,\n      inlineStyleOverride: inlineStyleOverride\n    };\n    return EditorState.set(editorState, editorStateChanges);\n  }\n  /**\n   * Make the top ContentState in the undo stack the new current content and\n   * push the current content onto the redo stack.\n   */\n  ;\n\n  EditorState.undo = function undo(editorState) {\n    if (!editorState.getAllowUndo()) {\n      return editorState;\n    }\n\n    var undoStack = editorState.getUndoStack();\n    var newCurrentContent = undoStack.peek();\n\n    if (!newCurrentContent) {\n      return editorState;\n    }\n\n    var currentContent = editorState.getCurrentContent();\n    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n    return EditorState.set(editorState, {\n      currentContent: newCurrentContent,\n      directionMap: directionMap,\n      undoStack: undoStack.shift(),\n      redoStack: editorState.getRedoStack().push(currentContent),\n      forceSelection: true,\n      inlineStyleOverride: null,\n      lastChangeType: 'undo',\n      nativelyRenderedContent: null,\n      selection: currentContent.getSelectionBefore()\n    });\n  }\n  /**\n   * Make the top ContentState in the redo stack the new current content and\n   * push the current content onto the undo stack.\n   */\n  ;\n\n  EditorState.redo = function redo(editorState) {\n    if (!editorState.getAllowUndo()) {\n      return editorState;\n    }\n\n    var redoStack = editorState.getRedoStack();\n    var newCurrentContent = redoStack.peek();\n\n    if (!newCurrentContent) {\n      return editorState;\n    }\n\n    var currentContent = editorState.getCurrentContent();\n    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n    return EditorState.set(editorState, {\n      currentContent: newCurrentContent,\n      directionMap: directionMap,\n      undoStack: editorState.getUndoStack().push(currentContent),\n      redoStack: redoStack.shift(),\n      forceSelection: true,\n      inlineStyleOverride: null,\n      lastChangeType: 'redo',\n      nativelyRenderedContent: null,\n      selection: newCurrentContent.getSelectionAfter()\n    });\n  }\n  /**\n   * Not for public consumption.\n   */\n  ;\n\n  function EditorState(immutable) {\n    _defineProperty(this, \"_immutable\", void 0);\n\n    this._immutable = immutable;\n  }\n  /**\n   * Not for public consumption.\n   */\n\n\n  _proto.getImmutable = function getImmutable() {\n    return this._immutable;\n  };\n\n  return EditorState;\n}();\n/**\n * Set the supplied SelectionState as the new current selection, and set\n * the `force` flag to trigger manual selection placement by the view.\n */\n\n\nfunction updateSelection(editorState, selection, forceSelection) {\n  return EditorState.set(editorState, {\n    selection: selection,\n    forceSelection: forceSelection,\n    nativelyRenderedContent: null,\n    inlineStyleOverride: null\n  });\n}\n/**\n * Regenerate the entire tree map for a given ContentState and decorator.\n * Returns an OrderedMap that maps all available ContentBlock objects.\n */\n\n\nfunction generateNewTreeMap(contentState, decorator) {\n  return contentState.getBlockMap().map(function (block) {\n    return BlockTree.generate(contentState, block, decorator);\n  }).toOrderedMap();\n}\n/**\n * Regenerate tree map objects for all ContentBlocks that have changed\n * between the current editorState and newContent. Returns an OrderedMap\n * with only changed regenerated tree map objects.\n */\n\n\nfunction regenerateTreeForNewBlocks(editorState, newBlockMap, newEntityMap, decorator) {\n  var contentState = editorState.getCurrentContent().set('entityMap', newEntityMap);\n  var prevBlockMap = contentState.getBlockMap();\n  var prevTreeMap = editorState.getImmutable().get('treeMap');\n  return prevTreeMap.merge(newBlockMap.toSeq().filter(function (block, key) {\n    return block !== prevBlockMap.get(key);\n  }).map(function (block) {\n    return BlockTree.generate(contentState, block, decorator);\n  }));\n}\n/**\n * Generate tree map objects for a new decorator object, preserving any\n * decorations that are unchanged from the previous decorator.\n *\n * Note that in order for this to perform optimally, decoration Lists for\n * decorators should be preserved when possible to allow for direct immutable\n * List comparison.\n */\n\n\nfunction regenerateTreeForNewDecorator(content, blockMap, previousTreeMap, decorator, existingDecorator) {\n  return previousTreeMap.merge(blockMap.toSeq().filter(function (block) {\n    return decorator.getDecorations(block, content) !== existingDecorator.getDecorations(block, content);\n  }).map(function (block) {\n    return BlockTree.generate(content, block, decorator);\n  }));\n}\n/**\n * Return whether a change should be considered a boundary state, given\n * the previous change type. Allows us to discard potential boundary states\n * during standard typing or deletion behavior.\n */\n\n\nfunction mustBecomeBoundary(editorState, changeType) {\n  var lastChangeType = editorState.getLastChangeType();\n  return changeType !== lastChangeType || changeType !== 'insert-characters' && changeType !== 'backspace-character' && changeType !== 'delete-character';\n}\n\nfunction getInlineStyleForCollapsedSelection(content, selection) {\n  var startKey = selection.getStartKey();\n  var startOffset = selection.getStartOffset();\n  var startBlock = content.getBlockForKey(startKey); // If the cursor is not at the start of the block, look backward to\n  // preserve the style of the preceding character.\n\n  if (startOffset > 0) {\n    return startBlock.getInlineStyleAt(startOffset - 1);\n  } // The caret is at position zero in this block. If the block has any\n  // text at all, use the style of the first character.\n\n\n  if (startBlock.getLength()) {\n    return startBlock.getInlineStyleAt(0);\n  } // Otherwise, look upward in the document to find the closest character.\n\n\n  return lookUpwardForInlineStyle(content, startKey);\n}\n\nfunction getInlineStyleForNonCollapsedSelection(content, selection) {\n  var startKey = selection.getStartKey();\n  var startOffset = selection.getStartOffset();\n  var startBlock = content.getBlockForKey(startKey); // If there is a character just inside the selection, use its style.\n\n  if (startOffset < startBlock.getLength()) {\n    return startBlock.getInlineStyleAt(startOffset);\n  } // Check if the selection at the end of a non-empty block. Use the last\n  // style in the block.\n\n\n  if (startOffset > 0) {\n    return startBlock.getInlineStyleAt(startOffset - 1);\n  } // Otherwise, look upward in the document to find the closest character.\n\n\n  return lookUpwardForInlineStyle(content, startKey);\n}\n\nfunction lookUpwardForInlineStyle(content, fromKey) {\n  var lastNonEmpty = content.getBlockMap().reverse().skipUntil(function (_, k) {\n    return k === fromKey;\n  }).skip(1).skipUntil(function (block, _) {\n    return block.getLength();\n  }).first();\n\n  if (lastNonEmpty) {\n    return lastNonEmpty.getInlineStyleAt(lastNonEmpty.getLength() - 1);\n  }\n\n  return OrderedSet();\n}\n\nmodule.exports = EditorState;"],"mappings":"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"},"metadata":{},"sourceType":"script"}