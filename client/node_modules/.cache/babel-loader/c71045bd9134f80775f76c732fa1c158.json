{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar DraftModifier = require(\"./DraftModifier\");\n\nvar EditorState = require(\"./EditorState\");\n\nvar KeyBindingUtil = require(\"./KeyBindingUtil\");\n\nvar Keys = require(\"fbjs/lib/Keys\");\n\nvar SecondaryClipboard = require(\"./SecondaryClipboard\");\n\nvar UserAgent = require(\"fbjs/lib/UserAgent\");\n\nvar isEventHandled = require(\"./isEventHandled\");\n\nvar keyCommandBackspaceToStartOfLine = require(\"./keyCommandBackspaceToStartOfLine\");\n\nvar keyCommandBackspaceWord = require(\"./keyCommandBackspaceWord\");\n\nvar keyCommandDeleteWord = require(\"./keyCommandDeleteWord\");\n\nvar keyCommandInsertNewline = require(\"./keyCommandInsertNewline\");\n\nvar keyCommandMoveSelectionToEndOfBlock = require(\"./keyCommandMoveSelectionToEndOfBlock\");\n\nvar keyCommandMoveSelectionToStartOfBlock = require(\"./keyCommandMoveSelectionToStartOfBlock\");\n\nvar keyCommandPlainBackspace = require(\"./keyCommandPlainBackspace\");\n\nvar keyCommandPlainDelete = require(\"./keyCommandPlainDelete\");\n\nvar keyCommandTransposeCharacters = require(\"./keyCommandTransposeCharacters\");\n\nvar keyCommandUndo = require(\"./keyCommandUndo\");\n\nvar isOptionKeyCommand = KeyBindingUtil.isOptionKeyCommand;\nvar isChrome = UserAgent.isBrowser('Chrome');\n/**\n * Map a `DraftEditorCommand` command value to a corresponding function.\n */\n\nfunction onKeyCommand(command, editorState, e) {\n  switch (command) {\n    case 'redo':\n      return EditorState.redo(editorState);\n\n    case 'delete':\n      return keyCommandPlainDelete(editorState);\n\n    case 'delete-word':\n      return keyCommandDeleteWord(editorState);\n\n    case 'backspace':\n      return keyCommandPlainBackspace(editorState);\n\n    case 'backspace-word':\n      return keyCommandBackspaceWord(editorState);\n\n    case 'backspace-to-start-of-line':\n      return keyCommandBackspaceToStartOfLine(editorState, e);\n\n    case 'split-block':\n      return keyCommandInsertNewline(editorState);\n\n    case 'transpose-characters':\n      return keyCommandTransposeCharacters(editorState);\n\n    case 'move-selection-to-start-of-block':\n      return keyCommandMoveSelectionToStartOfBlock(editorState);\n\n    case 'move-selection-to-end-of-block':\n      return keyCommandMoveSelectionToEndOfBlock(editorState);\n\n    case 'secondary-cut':\n      return SecondaryClipboard.cut(editorState);\n\n    case 'secondary-paste':\n      return SecondaryClipboard.paste(editorState);\n\n    default:\n      return editorState;\n  }\n}\n/**\n * Intercept keydown behavior to handle keys and commands manually, if desired.\n *\n * Keydown combinations may be mapped to `DraftCommand` values, which may\n * correspond to command functions that modify the editor or its contents.\n *\n * See `getDefaultKeyBinding` for defaults. Alternatively, the top-level\n * component may provide a custom mapping via the `keyBindingFn` prop.\n */\n\n\nfunction editOnKeyDown(editor, e) {\n  var keyCode = e.which;\n  var editorState = editor._latestEditorState;\n\n  function callDeprecatedHandler(handlerName) {\n    var deprecatedHandler = editor.props[handlerName];\n\n    if (deprecatedHandler) {\n      deprecatedHandler(e);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  switch (keyCode) {\n    case Keys.RETURN:\n      e.preventDefault(); // The top-level component may manually handle newline insertion. If\n      // no special handling is performed, fall through to command handling.\n\n      if (editor.props.handleReturn && isEventHandled(editor.props.handleReturn(e, editorState))) {\n        return;\n      }\n\n      break;\n\n    case Keys.ESC:\n      e.preventDefault();\n\n      if (callDeprecatedHandler('onEscape')) {\n        return;\n      }\n\n      break;\n\n    case Keys.TAB:\n      if (callDeprecatedHandler('onTab')) {\n        return;\n      }\n\n      break;\n\n    case Keys.UP:\n      if (callDeprecatedHandler('onUpArrow')) {\n        return;\n      }\n\n      break;\n\n    case Keys.RIGHT:\n      if (callDeprecatedHandler('onRightArrow')) {\n        return;\n      }\n\n      break;\n\n    case Keys.DOWN:\n      if (callDeprecatedHandler('onDownArrow')) {\n        return;\n      }\n\n      break;\n\n    case Keys.LEFT:\n      if (callDeprecatedHandler('onLeftArrow')) {\n        return;\n      }\n\n      break;\n\n    case Keys.SPACE:\n      // Prevent Chrome on OSX behavior where option + space scrolls.\n      if (isChrome && isOptionKeyCommand(e)) {\n        e.preventDefault();\n      }\n\n  }\n\n  var command = editor.props.keyBindingFn(e); // If no command is specified, allow keydown event to continue.\n\n  if (command == null || command === '') {\n    if (keyCode === Keys.SPACE && isChrome && isOptionKeyCommand(e)) {\n      // The default keydown event has already been prevented in order to stop\n      // Chrome from scrolling. Insert a nbsp into the editor as OSX would for\n      // other browsers.\n      var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), \"\\xA0\");\n      editor.update(EditorState.push(editorState, contentState, 'insert-characters'));\n    }\n\n    return;\n  }\n\n  if (command === 'undo') {\n    // Since undo requires some special updating behavior to keep the editor\n    // in sync, handle it separately.\n    keyCommandUndo(e, editorState, editor.update);\n    return;\n  } // At this point, we know that we're handling a command of some kind, so\n  // we don't want to insert a character following the keydown.\n\n\n  e.preventDefault(); // Allow components higher up the tree to handle the command first.\n\n  if (editor.props.handleKeyCommand && isEventHandled(editor.props.handleKeyCommand(command, editorState, e.timeStamp))) {\n    return;\n  }\n\n  var newState = onKeyCommand(command, editorState, e);\n\n  if (newState !== editorState) {\n    editor.update(newState);\n  }\n}\n\nmodule.exports = editOnKeyDown;","map":{"version":3,"names":["DraftModifier","require","EditorState","KeyBindingUtil","Keys","SecondaryClipboard","UserAgent","isEventHandled","keyCommandBackspaceToStartOfLine","keyCommandBackspaceWord","keyCommandDeleteWord","keyCommandInsertNewline","keyCommandMoveSelectionToEndOfBlock","keyCommandMoveSelectionToStartOfBlock","keyCommandPlainBackspace","keyCommandPlainDelete","keyCommandTransposeCharacters","keyCommandUndo","isOptionKeyCommand","isChrome","isBrowser","onKeyCommand","command","editorState","e","redo","cut","paste","editOnKeyDown","editor","keyCode","which","_latestEditorState","callDeprecatedHandler","handlerName","deprecatedHandler","props","RETURN","preventDefault","handleReturn","ESC","TAB","UP","RIGHT","DOWN","LEFT","SPACE","keyBindingFn","contentState","replaceText","getCurrentContent","getSelection","update","push","handleKeyCommand","timeStamp","newState","module","exports"],"sources":["/home/sudhanshu/Documents/combett/node_modules/draft-js/lib/editOnKeyDown.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar DraftModifier = require(\"./DraftModifier\");\n\nvar EditorState = require(\"./EditorState\");\n\nvar KeyBindingUtil = require(\"./KeyBindingUtil\");\n\nvar Keys = require(\"fbjs/lib/Keys\");\n\nvar SecondaryClipboard = require(\"./SecondaryClipboard\");\n\nvar UserAgent = require(\"fbjs/lib/UserAgent\");\n\nvar isEventHandled = require(\"./isEventHandled\");\n\nvar keyCommandBackspaceToStartOfLine = require(\"./keyCommandBackspaceToStartOfLine\");\n\nvar keyCommandBackspaceWord = require(\"./keyCommandBackspaceWord\");\n\nvar keyCommandDeleteWord = require(\"./keyCommandDeleteWord\");\n\nvar keyCommandInsertNewline = require(\"./keyCommandInsertNewline\");\n\nvar keyCommandMoveSelectionToEndOfBlock = require(\"./keyCommandMoveSelectionToEndOfBlock\");\n\nvar keyCommandMoveSelectionToStartOfBlock = require(\"./keyCommandMoveSelectionToStartOfBlock\");\n\nvar keyCommandPlainBackspace = require(\"./keyCommandPlainBackspace\");\n\nvar keyCommandPlainDelete = require(\"./keyCommandPlainDelete\");\n\nvar keyCommandTransposeCharacters = require(\"./keyCommandTransposeCharacters\");\n\nvar keyCommandUndo = require(\"./keyCommandUndo\");\n\nvar isOptionKeyCommand = KeyBindingUtil.isOptionKeyCommand;\nvar isChrome = UserAgent.isBrowser('Chrome');\n/**\n * Map a `DraftEditorCommand` command value to a corresponding function.\n */\n\nfunction onKeyCommand(command, editorState, e) {\n  switch (command) {\n    case 'redo':\n      return EditorState.redo(editorState);\n\n    case 'delete':\n      return keyCommandPlainDelete(editorState);\n\n    case 'delete-word':\n      return keyCommandDeleteWord(editorState);\n\n    case 'backspace':\n      return keyCommandPlainBackspace(editorState);\n\n    case 'backspace-word':\n      return keyCommandBackspaceWord(editorState);\n\n    case 'backspace-to-start-of-line':\n      return keyCommandBackspaceToStartOfLine(editorState, e);\n\n    case 'split-block':\n      return keyCommandInsertNewline(editorState);\n\n    case 'transpose-characters':\n      return keyCommandTransposeCharacters(editorState);\n\n    case 'move-selection-to-start-of-block':\n      return keyCommandMoveSelectionToStartOfBlock(editorState);\n\n    case 'move-selection-to-end-of-block':\n      return keyCommandMoveSelectionToEndOfBlock(editorState);\n\n    case 'secondary-cut':\n      return SecondaryClipboard.cut(editorState);\n\n    case 'secondary-paste':\n      return SecondaryClipboard.paste(editorState);\n\n    default:\n      return editorState;\n  }\n}\n/**\n * Intercept keydown behavior to handle keys and commands manually, if desired.\n *\n * Keydown combinations may be mapped to `DraftCommand` values, which may\n * correspond to command functions that modify the editor or its contents.\n *\n * See `getDefaultKeyBinding` for defaults. Alternatively, the top-level\n * component may provide a custom mapping via the `keyBindingFn` prop.\n */\n\n\nfunction editOnKeyDown(editor, e) {\n  var keyCode = e.which;\n  var editorState = editor._latestEditorState;\n\n  function callDeprecatedHandler(handlerName) {\n    var deprecatedHandler = editor.props[handlerName];\n\n    if (deprecatedHandler) {\n      deprecatedHandler(e);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  switch (keyCode) {\n    case Keys.RETURN:\n      e.preventDefault(); // The top-level component may manually handle newline insertion. If\n      // no special handling is performed, fall through to command handling.\n\n      if (editor.props.handleReturn && isEventHandled(editor.props.handleReturn(e, editorState))) {\n        return;\n      }\n\n      break;\n\n    case Keys.ESC:\n      e.preventDefault();\n\n      if (callDeprecatedHandler('onEscape')) {\n        return;\n      }\n\n      break;\n\n    case Keys.TAB:\n      if (callDeprecatedHandler('onTab')) {\n        return;\n      }\n\n      break;\n\n    case Keys.UP:\n      if (callDeprecatedHandler('onUpArrow')) {\n        return;\n      }\n\n      break;\n\n    case Keys.RIGHT:\n      if (callDeprecatedHandler('onRightArrow')) {\n        return;\n      }\n\n      break;\n\n    case Keys.DOWN:\n      if (callDeprecatedHandler('onDownArrow')) {\n        return;\n      }\n\n      break;\n\n    case Keys.LEFT:\n      if (callDeprecatedHandler('onLeftArrow')) {\n        return;\n      }\n\n      break;\n\n    case Keys.SPACE:\n      // Prevent Chrome on OSX behavior where option + space scrolls.\n      if (isChrome && isOptionKeyCommand(e)) {\n        e.preventDefault();\n      }\n\n  }\n\n  var command = editor.props.keyBindingFn(e); // If no command is specified, allow keydown event to continue.\n\n  if (command == null || command === '') {\n    if (keyCode === Keys.SPACE && isChrome && isOptionKeyCommand(e)) {\n      // The default keydown event has already been prevented in order to stop\n      // Chrome from scrolling. Insert a nbsp into the editor as OSX would for\n      // other browsers.\n      var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), \"\\xA0\");\n      editor.update(EditorState.push(editorState, contentState, 'insert-characters'));\n    }\n\n    return;\n  }\n\n  if (command === 'undo') {\n    // Since undo requires some special updating behavior to keep the editor\n    // in sync, handle it separately.\n    keyCommandUndo(e, editorState, editor.update);\n    return;\n  } // At this point, we know that we're handling a command of some kind, so\n  // we don't want to insert a character following the keydown.\n\n\n  e.preventDefault(); // Allow components higher up the tree to handle the command first.\n\n  if (editor.props.handleKeyCommand && isEventHandled(editor.props.handleKeyCommand(command, editorState, e.timeStamp))) {\n    return;\n  }\n\n  var newState = onKeyCommand(command, editorState, e);\n\n  if (newState !== editorState) {\n    editor.update(newState);\n  }\n}\n\nmodule.exports = editOnKeyDown;"],"mappings":"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"},"metadata":{},"sourceType":"script"}