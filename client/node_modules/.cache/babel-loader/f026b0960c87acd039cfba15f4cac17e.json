{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleToken = void 0;\n\nconst fs = require(\"fs\");\n\nconst gaxios_1 = require(\"gaxios\");\n\nconst jws = require(\"jws\");\n\nconst path = require(\"path\");\n\nconst util_1 = require(\"util\");\n\nconst readFile = fs.readFile ? util_1.promisify(fs.readFile) : async () => {\n  // if running in the web-browser, fs.readFile may not have been shimmed.\n  throw new ErrorWithCode('use key rather than keyFile.', 'MISSING_CREDENTIALS');\n};\nconst GOOGLE_TOKEN_URL = 'https://www.googleapis.com/oauth2/v4/token';\nconst GOOGLE_REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke?token=';\n\nclass ErrorWithCode extends Error {\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n  }\n\n}\n\nlet getPem;\n\nclass GoogleToken {\n  /**\n   * Create a GoogleToken.\n   *\n   * @param options  Configuration object.\n   */\n  constructor(options) {\n    this.configure(options);\n  }\n\n  get accessToken() {\n    return this.rawToken ? this.rawToken.access_token : undefined;\n  }\n\n  get idToken() {\n    return this.rawToken ? this.rawToken.id_token : undefined;\n  }\n\n  get tokenType() {\n    return this.rawToken ? this.rawToken.token_type : undefined;\n  }\n\n  get refreshToken() {\n    return this.rawToken ? this.rawToken.refresh_token : undefined;\n  }\n  /**\n   * Returns whether the token has expired.\n   *\n   * @return true if the token has expired, false otherwise.\n   */\n\n\n  hasExpired() {\n    const now = new Date().getTime();\n\n    if (this.rawToken && this.expiresAt) {\n      return now >= this.expiresAt;\n    } else {\n      return true;\n    }\n  }\n  /**\n   * Returns whether the token will expire within eagerRefreshThresholdMillis\n   *\n   * @return true if the token will be expired within eagerRefreshThresholdMillis, false otherwise.\n   */\n\n\n  isTokenExpiring() {\n    var _a;\n\n    const now = new Date().getTime();\n    const eagerRefreshThresholdMillis = (_a = this.eagerRefreshThresholdMillis) !== null && _a !== void 0 ? _a : 0;\n\n    if (this.rawToken && this.expiresAt) {\n      return this.expiresAt <= now + eagerRefreshThresholdMillis;\n    } else {\n      return true;\n    }\n  }\n\n  getToken(callback) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (typeof callback === 'object') {\n      opts = callback;\n      callback = undefined;\n    }\n\n    opts = Object.assign({\n      forceRefresh: false\n    }, opts);\n\n    if (callback) {\n      const cb = callback;\n      this.getTokenAsync(opts).then(t => cb(null, t), callback);\n      return;\n    }\n\n    return this.getTokenAsync(opts);\n  }\n  /**\n   * Given a keyFile, extract the key and client email if available\n   * @param keyFile Path to a json, pem, or p12 file that contains the key.\n   * @returns an object with privateKey and clientEmail properties\n   */\n\n\n  async getCredentials(keyFile) {\n    const ext = path.extname(keyFile);\n\n    switch (ext) {\n      case '.json':\n        {\n          const key = await readFile(keyFile, 'utf8');\n          const body = JSON.parse(key);\n          const privateKey = body.private_key;\n          const clientEmail = body.client_email;\n\n          if (!privateKey || !clientEmail) {\n            throw new ErrorWithCode('private_key and client_email are required.', 'MISSING_CREDENTIALS');\n          }\n\n          return {\n            privateKey,\n            clientEmail\n          };\n        }\n\n      case '.der':\n      case '.crt':\n      case '.pem':\n        {\n          const privateKey = await readFile(keyFile, 'utf8');\n          return {\n            privateKey\n          };\n        }\n\n      case '.p12':\n      case '.pfx':\n        {\n          // NOTE:  The loading of `google-p12-pem` is deferred for performance\n          // reasons.  The `node-forge` npm module in `google-p12-pem` adds a fair\n          // bit time to overall module loading, and is likely not frequently\n          // used.  In a future release, p12 support will be entirely removed.\n          if (!getPem) {\n            getPem = (await Promise.resolve().then(() => require('google-p12-pem'))).getPem;\n          }\n\n          const privateKey = await getPem(keyFile);\n          return {\n            privateKey\n          };\n        }\n\n      default:\n        throw new ErrorWithCode('Unknown certificate type. Type is determined based on file extension. ' + 'Current supported extensions are *.json, *.pem, and *.p12.', 'UNKNOWN_CERTIFICATE_TYPE');\n    }\n  }\n\n  async getTokenAsync(opts) {\n    if (this.inFlightRequest && !opts.forceRefresh) {\n      return this.inFlightRequest;\n    }\n\n    try {\n      return await (this.inFlightRequest = this.getTokenAsyncInner(opts));\n    } finally {\n      this.inFlightRequest = undefined;\n    }\n  }\n\n  async getTokenAsyncInner(opts) {\n    if (this.isTokenExpiring() === false && opts.forceRefresh === false) {\n      return Promise.resolve(this.rawToken);\n    }\n\n    if (!this.key && !this.keyFile) {\n      throw new Error('No key or keyFile set.');\n    }\n\n    if (!this.key && this.keyFile) {\n      const creds = await this.getCredentials(this.keyFile);\n      this.key = creds.privateKey;\n      this.iss = creds.clientEmail || this.iss;\n\n      if (!creds.clientEmail) {\n        this.ensureEmail();\n      }\n    }\n\n    return this.requestToken();\n  }\n\n  ensureEmail() {\n    if (!this.iss) {\n      throw new ErrorWithCode('email is required.', 'MISSING_CREDENTIALS');\n    }\n  }\n\n  revokeToken(callback) {\n    if (callback) {\n      this.revokeTokenAsync().then(() => callback(), callback);\n      return;\n    }\n\n    return this.revokeTokenAsync();\n  }\n\n  async revokeTokenAsync() {\n    if (!this.accessToken) {\n      throw new Error('No token to revoke.');\n    }\n\n    const url = GOOGLE_REVOKE_TOKEN_URL + this.accessToken;\n    await gaxios_1.request({\n      url\n    });\n    this.configure({\n      email: this.iss,\n      sub: this.sub,\n      key: this.key,\n      keyFile: this.keyFile,\n      scope: this.scope,\n      additionalClaims: this.additionalClaims\n    });\n  }\n  /**\n   * Configure the GoogleToken for re-use.\n   * @param  {object} options Configuration object.\n   */\n\n\n  configure() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.keyFile = options.keyFile;\n    this.key = options.key;\n    this.rawToken = undefined;\n    this.iss = options.email || options.iss;\n    this.sub = options.sub;\n    this.additionalClaims = options.additionalClaims;\n\n    if (typeof options.scope === 'object') {\n      this.scope = options.scope.join(' ');\n    } else {\n      this.scope = options.scope;\n    }\n\n    this.eagerRefreshThresholdMillis = options.eagerRefreshThresholdMillis;\n  }\n  /**\n   * Request the token from Google.\n   */\n\n\n  async requestToken() {\n    const iat = Math.floor(new Date().getTime() / 1000);\n    const additionalClaims = this.additionalClaims || {};\n    const payload = Object.assign({\n      iss: this.iss,\n      scope: this.scope,\n      aud: GOOGLE_TOKEN_URL,\n      exp: iat + 3600,\n      iat,\n      sub: this.sub\n    }, additionalClaims);\n    const signedJWT = jws.sign({\n      header: {\n        alg: 'RS256'\n      },\n      payload,\n      secret: this.key\n    });\n\n    try {\n      const r = await gaxios_1.request({\n        method: 'POST',\n        url: GOOGLE_TOKEN_URL,\n        data: {\n          grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n          assertion: signedJWT\n        },\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        responseType: 'json'\n      });\n      this.rawToken = r.data;\n      this.expiresAt = r.data.expires_in === null || r.data.expires_in === undefined ? undefined : (iat + r.data.expires_in) * 1000;\n      return this.rawToken;\n    } catch (e) {\n      this.rawToken = undefined;\n      this.tokenExpires = undefined;\n      const body = e.response && e.response.data ? e.response.data : {};\n\n      if (body.error) {\n        const desc = body.error_description ? `: ${body.error_description}` : '';\n        e.message = `${body.error}${desc}`;\n      }\n\n      throw e;\n    }\n  }\n\n}\n\nexports.GoogleToken = GoogleToken;","map":{"version":3,"names":["Object","defineProperty","exports","value","GoogleToken","fs","require","gaxios_1","jws","path","util_1","readFile","promisify","ErrorWithCode","GOOGLE_TOKEN_URL","GOOGLE_REVOKE_TOKEN_URL","Error","constructor","message","code","getPem","options","configure","accessToken","rawToken","access_token","undefined","idToken","id_token","tokenType","token_type","refreshToken","refresh_token","hasExpired","now","Date","getTime","expiresAt","isTokenExpiring","_a","eagerRefreshThresholdMillis","getToken","callback","opts","assign","forceRefresh","cb","getTokenAsync","then","t","getCredentials","keyFile","ext","extname","key","body","JSON","parse","privateKey","private_key","clientEmail","client_email","Promise","resolve","inFlightRequest","getTokenAsyncInner","creds","iss","ensureEmail","requestToken","revokeToken","revokeTokenAsync","url","request","email","sub","scope","additionalClaims","join","iat","Math","floor","payload","aud","exp","signedJWT","sign","header","alg","secret","r","method","data","grant_type","assertion","headers","responseType","expires_in","e","tokenExpires","response","error","desc","error_description"],"sources":["/home/sudhanshu/Documents/combett/node_modules/gtoken/build/src/index.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GoogleToken = void 0;\nconst fs = require(\"fs\");\nconst gaxios_1 = require(\"gaxios\");\nconst jws = require(\"jws\");\nconst path = require(\"path\");\nconst util_1 = require(\"util\");\nconst readFile = fs.readFile\n    ? util_1.promisify(fs.readFile)\n    : async () => {\n        // if running in the web-browser, fs.readFile may not have been shimmed.\n        throw new ErrorWithCode('use key rather than keyFile.', 'MISSING_CREDENTIALS');\n    };\nconst GOOGLE_TOKEN_URL = 'https://www.googleapis.com/oauth2/v4/token';\nconst GOOGLE_REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke?token=';\nclass ErrorWithCode extends Error {\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n    }\n}\nlet getPem;\nclass GoogleToken {\n    /**\n     * Create a GoogleToken.\n     *\n     * @param options  Configuration object.\n     */\n    constructor(options) {\n        this.configure(options);\n    }\n    get accessToken() {\n        return this.rawToken ? this.rawToken.access_token : undefined;\n    }\n    get idToken() {\n        return this.rawToken ? this.rawToken.id_token : undefined;\n    }\n    get tokenType() {\n        return this.rawToken ? this.rawToken.token_type : undefined;\n    }\n    get refreshToken() {\n        return this.rawToken ? this.rawToken.refresh_token : undefined;\n    }\n    /**\n     * Returns whether the token has expired.\n     *\n     * @return true if the token has expired, false otherwise.\n     */\n    hasExpired() {\n        const now = new Date().getTime();\n        if (this.rawToken && this.expiresAt) {\n            return now >= this.expiresAt;\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * Returns whether the token will expire within eagerRefreshThresholdMillis\n     *\n     * @return true if the token will be expired within eagerRefreshThresholdMillis, false otherwise.\n     */\n    isTokenExpiring() {\n        var _a;\n        const now = new Date().getTime();\n        const eagerRefreshThresholdMillis = (_a = this.eagerRefreshThresholdMillis) !== null && _a !== void 0 ? _a : 0;\n        if (this.rawToken && this.expiresAt) {\n            return this.expiresAt <= now + eagerRefreshThresholdMillis;\n        }\n        else {\n            return true;\n        }\n    }\n    getToken(callback, opts = {}) {\n        if (typeof callback === 'object') {\n            opts = callback;\n            callback = undefined;\n        }\n        opts = Object.assign({\n            forceRefresh: false,\n        }, opts);\n        if (callback) {\n            const cb = callback;\n            this.getTokenAsync(opts).then(t => cb(null, t), callback);\n            return;\n        }\n        return this.getTokenAsync(opts);\n    }\n    /**\n     * Given a keyFile, extract the key and client email if available\n     * @param keyFile Path to a json, pem, or p12 file that contains the key.\n     * @returns an object with privateKey and clientEmail properties\n     */\n    async getCredentials(keyFile) {\n        const ext = path.extname(keyFile);\n        switch (ext) {\n            case '.json': {\n                const key = await readFile(keyFile, 'utf8');\n                const body = JSON.parse(key);\n                const privateKey = body.private_key;\n                const clientEmail = body.client_email;\n                if (!privateKey || !clientEmail) {\n                    throw new ErrorWithCode('private_key and client_email are required.', 'MISSING_CREDENTIALS');\n                }\n                return { privateKey, clientEmail };\n            }\n            case '.der':\n            case '.crt':\n            case '.pem': {\n                const privateKey = await readFile(keyFile, 'utf8');\n                return { privateKey };\n            }\n            case '.p12':\n            case '.pfx': {\n                // NOTE:  The loading of `google-p12-pem` is deferred for performance\n                // reasons.  The `node-forge` npm module in `google-p12-pem` adds a fair\n                // bit time to overall module loading, and is likely not frequently\n                // used.  In a future release, p12 support will be entirely removed.\n                if (!getPem) {\n                    getPem = (await Promise.resolve().then(() => require('google-p12-pem'))).getPem;\n                }\n                const privateKey = await getPem(keyFile);\n                return { privateKey };\n            }\n            default:\n                throw new ErrorWithCode('Unknown certificate type. Type is determined based on file extension. ' +\n                    'Current supported extensions are *.json, *.pem, and *.p12.', 'UNKNOWN_CERTIFICATE_TYPE');\n        }\n    }\n    async getTokenAsync(opts) {\n        if (this.inFlightRequest && !opts.forceRefresh) {\n            return this.inFlightRequest;\n        }\n        try {\n            return await (this.inFlightRequest = this.getTokenAsyncInner(opts));\n        }\n        finally {\n            this.inFlightRequest = undefined;\n        }\n    }\n    async getTokenAsyncInner(opts) {\n        if (this.isTokenExpiring() === false && opts.forceRefresh === false) {\n            return Promise.resolve(this.rawToken);\n        }\n        if (!this.key && !this.keyFile) {\n            throw new Error('No key or keyFile set.');\n        }\n        if (!this.key && this.keyFile) {\n            const creds = await this.getCredentials(this.keyFile);\n            this.key = creds.privateKey;\n            this.iss = creds.clientEmail || this.iss;\n            if (!creds.clientEmail) {\n                this.ensureEmail();\n            }\n        }\n        return this.requestToken();\n    }\n    ensureEmail() {\n        if (!this.iss) {\n            throw new ErrorWithCode('email is required.', 'MISSING_CREDENTIALS');\n        }\n    }\n    revokeToken(callback) {\n        if (callback) {\n            this.revokeTokenAsync().then(() => callback(), callback);\n            return;\n        }\n        return this.revokeTokenAsync();\n    }\n    async revokeTokenAsync() {\n        if (!this.accessToken) {\n            throw new Error('No token to revoke.');\n        }\n        const url = GOOGLE_REVOKE_TOKEN_URL + this.accessToken;\n        await gaxios_1.request({ url });\n        this.configure({\n            email: this.iss,\n            sub: this.sub,\n            key: this.key,\n            keyFile: this.keyFile,\n            scope: this.scope,\n            additionalClaims: this.additionalClaims,\n        });\n    }\n    /**\n     * Configure the GoogleToken for re-use.\n     * @param  {object} options Configuration object.\n     */\n    configure(options = {}) {\n        this.keyFile = options.keyFile;\n        this.key = options.key;\n        this.rawToken = undefined;\n        this.iss = options.email || options.iss;\n        this.sub = options.sub;\n        this.additionalClaims = options.additionalClaims;\n        if (typeof options.scope === 'object') {\n            this.scope = options.scope.join(' ');\n        }\n        else {\n            this.scope = options.scope;\n        }\n        this.eagerRefreshThresholdMillis = options.eagerRefreshThresholdMillis;\n    }\n    /**\n     * Request the token from Google.\n     */\n    async requestToken() {\n        const iat = Math.floor(new Date().getTime() / 1000);\n        const additionalClaims = this.additionalClaims || {};\n        const payload = Object.assign({\n            iss: this.iss,\n            scope: this.scope,\n            aud: GOOGLE_TOKEN_URL,\n            exp: iat + 3600,\n            iat,\n            sub: this.sub,\n        }, additionalClaims);\n        const signedJWT = jws.sign({\n            header: { alg: 'RS256' },\n            payload,\n            secret: this.key,\n        });\n        try {\n            const r = await gaxios_1.request({\n                method: 'POST',\n                url: GOOGLE_TOKEN_URL,\n                data: {\n                    grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n                    assertion: signedJWT,\n                },\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n                responseType: 'json',\n            });\n            this.rawToken = r.data;\n            this.expiresAt =\n                r.data.expires_in === null || r.data.expires_in === undefined\n                    ? undefined\n                    : (iat + r.data.expires_in) * 1000;\n            return this.rawToken;\n        }\n        catch (e) {\n            this.rawToken = undefined;\n            this.tokenExpires = undefined;\n            const body = e.response && e.response.data ? e.response.data : {};\n            if (body.error) {\n                const desc = body.error_description\n                    ? `: ${body.error_description}`\n                    : '';\n                e.message = `${body.error}${desc}`;\n            }\n            throw e;\n        }\n    }\n}\nexports.GoogleToken = GoogleToken;\n//# sourceMappingURL=index.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script"}