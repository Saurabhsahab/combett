{"ast":null,"code":"\"use strict\";\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n\n\nvar DraftEntityInstance = require(\"./DraftEntityInstance\");\n\nvar Immutable = require(\"immutable\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar uuid = require(\"./uuid\");\n\nvar Map = Immutable.Map;\nvar instances = Map();\nvar instanceKey = uuid();\n/**\n * Temporary utility for generating the warnings\n */\n\nfunction logWarning(oldMethodCall, newMethodCall) {\n  console.warn('WARNING: ' + oldMethodCall + ' will be deprecated soon!\\nPlease use \"' + newMethodCall + '\" instead.');\n}\n/**\n * A \"document entity\" is an object containing metadata associated with a\n * piece of text in a ContentBlock.\n *\n * For example, a `link` entity might include a `uri` property. When a\n * ContentBlock is rendered in the browser, text that refers to that link\n * entity may be rendered as an anchor, with the `uri` as the href value.\n *\n * In a ContentBlock, every position in the text may correspond to zero\n * or one entities. This correspondence is tracked using a key string,\n * generated via DraftEntity.create() and used to obtain entity metadata\n * via DraftEntity.get().\n */\n\n\nvar DraftEntity = {\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.getLastCreatedEntityKey' instead.\n   * ---\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */\n  getLastCreatedEntityKey: function getLastCreatedEntityKey() {\n    logWarning('DraftEntity.getLastCreatedEntityKey', 'contentState.getLastCreatedEntityKey');\n    return DraftEntity.__getLastCreatedEntityKey();\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.createEntity' instead.\n   * ---\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */\n  create: function create(type, mutability, data) {\n    logWarning('DraftEntity.create', 'contentState.createEntity');\n    return DraftEntity.__create(type, mutability, data);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.addEntity' instead.\n   * ---\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */\n  add: function add(instance) {\n    logWarning('DraftEntity.add', 'contentState.addEntity');\n    return DraftEntity.__add(instance);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.getEntity' instead.\n   * ---\n   * Retrieve the entity corresponding to the supplied key string.\n   */\n  get: function get(key) {\n    logWarning('DraftEntity.get', 'contentState.getEntity');\n    return DraftEntity.__get(key);\n  },\n\n  /**\n   * Get all the entities in the content state.\n   */\n  __getAll: function __getAll() {\n    return instances;\n  },\n\n  /**\n   * Load the entity map with the given set of entities.\n   */\n  __loadWithEntities: function __loadWithEntities(entities) {\n    instances = entities;\n    instanceKey = uuid();\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.mergeEntityData' instead.\n   * ---\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */\n  mergeData: function mergeData(key, toMerge) {\n    logWarning('DraftEntity.mergeData', 'contentState.mergeEntityData');\n    return DraftEntity.__mergeData(key, toMerge);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.replaceEntityData' instead.\n   * ---\n   * Completely replace the data for a given instance.\n   */\n  replaceData: function replaceData(key, newData) {\n    logWarning('DraftEntity.replaceData', 'contentState.replaceEntityData');\n    return DraftEntity.__replaceData(key, newData);\n  },\n  // ***********************************WARNING******************************\n  // --- the above public API will be deprecated in the next version of Draft!\n  // The methods below this line are private - don't call them directly.\n\n  /**\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */\n  __getLastCreatedEntityKey: function __getLastCreatedEntityKey() {\n    return instanceKey;\n  },\n\n  /**\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */\n  __create: function __create(type, mutability, data) {\n    return DraftEntity.__add(new DraftEntityInstance({\n      type: type,\n      mutability: mutability,\n      data: data || {}\n    }));\n  },\n\n  /**\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */\n  __add: function __add(instance) {\n    instanceKey = uuid();\n    instances = instances.set(instanceKey, instance);\n    return instanceKey;\n  },\n\n  /**\n   * Retrieve the entity corresponding to the supplied key string.\n   */\n  __get: function __get(key) {\n    var instance = instances.get(key);\n    !!!instance ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Unknown DraftEntity key: %s.', key) : invariant(false) : void 0;\n    return instance;\n  },\n\n  /**\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */\n  __mergeData: function __mergeData(key, toMerge) {\n    var instance = DraftEntity.__get(key);\n\n    var newData = _objectSpread({}, instance.getData(), toMerge);\n\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  },\n\n  /**\n   * Completely replace the data for a given instance.\n   */\n  __replaceData: function __replaceData(key, newData) {\n    var instance = DraftEntity.__get(key);\n\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  }\n};\nmodule.exports = DraftEntity;","map":{"version":3,"names":["_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","value","defineProperty","configurable","writable","DraftEntityInstance","require","Immutable","invariant","uuid","Map","instances","instanceKey","logWarning","oldMethodCall","newMethodCall","console","warn","DraftEntity","getLastCreatedEntityKey","__getLastCreatedEntityKey","create","type","mutability","data","__create","add","instance","__add","get","__get","__getAll","__loadWithEntities","entities","mergeData","toMerge","__mergeData","replaceData","newData","__replaceData","set","process","env","NODE_ENV","getData","newInstance","module","exports"],"sources":["/home/sudhanshu/Documents/combett/node_modules/draft-js/lib/DraftEntity.js"],"sourcesContent":["\"use strict\";\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\nvar DraftEntityInstance = require(\"./DraftEntityInstance\");\n\nvar Immutable = require(\"immutable\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar uuid = require(\"./uuid\");\n\nvar Map = Immutable.Map;\nvar instances = Map();\nvar instanceKey = uuid();\n/**\n * Temporary utility for generating the warnings\n */\n\nfunction logWarning(oldMethodCall, newMethodCall) {\n  console.warn('WARNING: ' + oldMethodCall + ' will be deprecated soon!\\nPlease use \"' + newMethodCall + '\" instead.');\n}\n\n/**\n * A \"document entity\" is an object containing metadata associated with a\n * piece of text in a ContentBlock.\n *\n * For example, a `link` entity might include a `uri` property. When a\n * ContentBlock is rendered in the browser, text that refers to that link\n * entity may be rendered as an anchor, with the `uri` as the href value.\n *\n * In a ContentBlock, every position in the text may correspond to zero\n * or one entities. This correspondence is tracked using a key string,\n * generated via DraftEntity.create() and used to obtain entity metadata\n * via DraftEntity.get().\n */\nvar DraftEntity = {\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.getLastCreatedEntityKey' instead.\n   * ---\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */\n  getLastCreatedEntityKey: function getLastCreatedEntityKey() {\n    logWarning('DraftEntity.getLastCreatedEntityKey', 'contentState.getLastCreatedEntityKey');\n    return DraftEntity.__getLastCreatedEntityKey();\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.createEntity' instead.\n   * ---\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */\n  create: function create(type, mutability, data) {\n    logWarning('DraftEntity.create', 'contentState.createEntity');\n    return DraftEntity.__create(type, mutability, data);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.addEntity' instead.\n   * ---\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */\n  add: function add(instance) {\n    logWarning('DraftEntity.add', 'contentState.addEntity');\n    return DraftEntity.__add(instance);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.getEntity' instead.\n   * ---\n   * Retrieve the entity corresponding to the supplied key string.\n   */\n  get: function get(key) {\n    logWarning('DraftEntity.get', 'contentState.getEntity');\n    return DraftEntity.__get(key);\n  },\n\n  /**\n   * Get all the entities in the content state.\n   */\n  __getAll: function __getAll() {\n    return instances;\n  },\n\n  /**\n   * Load the entity map with the given set of entities.\n   */\n  __loadWithEntities: function __loadWithEntities(entities) {\n    instances = entities;\n    instanceKey = uuid();\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.mergeEntityData' instead.\n   * ---\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */\n  mergeData: function mergeData(key, toMerge) {\n    logWarning('DraftEntity.mergeData', 'contentState.mergeEntityData');\n    return DraftEntity.__mergeData(key, toMerge);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.replaceEntityData' instead.\n   * ---\n   * Completely replace the data for a given instance.\n   */\n  replaceData: function replaceData(key, newData) {\n    logWarning('DraftEntity.replaceData', 'contentState.replaceEntityData');\n    return DraftEntity.__replaceData(key, newData);\n  },\n  // ***********************************WARNING******************************\n  // --- the above public API will be deprecated in the next version of Draft!\n  // The methods below this line are private - don't call them directly.\n\n  /**\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */\n  __getLastCreatedEntityKey: function __getLastCreatedEntityKey() {\n    return instanceKey;\n  },\n\n  /**\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */\n  __create: function __create(type, mutability, data) {\n    return DraftEntity.__add(new DraftEntityInstance({\n      type: type,\n      mutability: mutability,\n      data: data || {}\n    }));\n  },\n\n  /**\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */\n  __add: function __add(instance) {\n    instanceKey = uuid();\n    instances = instances.set(instanceKey, instance);\n    return instanceKey;\n  },\n\n  /**\n   * Retrieve the entity corresponding to the supplied key string.\n   */\n  __get: function __get(key) {\n    var instance = instances.get(key);\n    !!!instance ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Unknown DraftEntity key: %s.', key) : invariant(false) : void 0;\n    return instance;\n  },\n\n  /**\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */\n  __mergeData: function __mergeData(key, toMerge) {\n    var instance = DraftEntity.__get(key);\n\n    var newData = _objectSpread({}, instance.getData(), toMerge);\n\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  },\n\n  /**\n   * Completely replace the data for a given instance.\n   */\n  __replaceData: function __replaceData(key, newData) {\n    var instance = DraftEntity.__get(key);\n\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  }\n};\nmodule.exports = DraftEntity;"],"mappings":"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"},"metadata":{},"sourceType":"script"}