{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar CharacterMetadata = require(\"./CharacterMetadata\");\n\nvar ContentStateInlineStyle = require(\"./ContentStateInlineStyle\");\n\nvar applyEntityToContentState = require(\"./applyEntityToContentState\");\n\nvar getCharacterRemovalRange = require(\"./getCharacterRemovalRange\");\n\nvar getContentStateFragment = require(\"./getContentStateFragment\");\n\nvar Immutable = require(\"immutable\");\n\nvar insertFragmentIntoContentState = require(\"./insertFragmentIntoContentState\");\n\nvar insertTextIntoContentState = require(\"./insertTextIntoContentState\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar modifyBlockForContentState = require(\"./modifyBlockForContentState\");\n\nvar removeEntitiesAtEdges = require(\"./removeEntitiesAtEdges\");\n\nvar removeRangeFromContentState = require(\"./removeRangeFromContentState\");\n\nvar splitBlockInContentState = require(\"./splitBlockInContentState\");\n\nvar OrderedSet = Immutable.OrderedSet;\n/**\n * `DraftModifier` provides a set of convenience methods that apply\n * modifications to a `ContentState` object based on a target `SelectionState`.\n *\n * Any change to a `ContentState` should be decomposable into a series of\n * transaction functions that apply the required changes and return output\n * `ContentState` objects.\n *\n * These functions encapsulate some of the most common transaction sequences.\n */\n\nvar DraftModifier = {\n  replaceText: function replaceText(contentState, rangeToReplace, text, inlineStyle, entityKey) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, rangeToReplace);\n    var withoutText = removeRangeFromContentState(withoutEntities, rangeToReplace);\n    var character = CharacterMetadata.create({\n      style: inlineStyle || OrderedSet(),\n      entity: entityKey || null\n    });\n    return insertTextIntoContentState(withoutText, withoutText.getSelectionAfter(), text, character);\n  },\n  insertText: function insertText(contentState, targetRange, text, inlineStyle, entityKey) {\n    !targetRange.isCollapsed() ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Target range must be collapsed for `insertText`.') : invariant(false) : void 0;\n    return DraftModifier.replaceText(contentState, targetRange, text, inlineStyle, entityKey);\n  },\n  moveText: function moveText(contentState, removalRange, targetRange) {\n    var movedFragment = getContentStateFragment(contentState, removalRange);\n    var afterRemoval = DraftModifier.removeRange(contentState, removalRange, 'backward');\n    return DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);\n  },\n  replaceWithFragment: function replaceWithFragment(contentState, targetRange, fragment) {\n    var mergeBlockData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'REPLACE_WITH_NEW_DATA';\n    var withoutEntities = removeEntitiesAtEdges(contentState, targetRange);\n    var withoutText = removeRangeFromContentState(withoutEntities, targetRange);\n    return insertFragmentIntoContentState(withoutText, withoutText.getSelectionAfter(), fragment, mergeBlockData);\n  },\n  removeRange: function removeRange(contentState, rangeToRemove, removalDirection) {\n    var startKey, endKey, startBlock, endBlock;\n\n    if (rangeToRemove.getIsBackward()) {\n      rangeToRemove = rangeToRemove.merge({\n        anchorKey: rangeToRemove.getFocusKey(),\n        anchorOffset: rangeToRemove.getFocusOffset(),\n        focusKey: rangeToRemove.getAnchorKey(),\n        focusOffset: rangeToRemove.getAnchorOffset(),\n        isBackward: false\n      });\n    }\n\n    startKey = rangeToRemove.getAnchorKey();\n    endKey = rangeToRemove.getFocusKey();\n    startBlock = contentState.getBlockForKey(startKey);\n    endBlock = contentState.getBlockForKey(endKey);\n    var startOffset = rangeToRemove.getStartOffset();\n    var endOffset = rangeToRemove.getEndOffset();\n    var startEntityKey = startBlock.getEntityAt(startOffset);\n    var endEntityKey = endBlock.getEntityAt(endOffset - 1); // Check whether the selection state overlaps with a single entity.\n    // If so, try to remove the appropriate substring of the entity text.\n\n    if (startKey === endKey) {\n      if (startEntityKey && startEntityKey === endEntityKey) {\n        var adjustedRemovalRange = getCharacterRemovalRange(contentState.getEntityMap(), startBlock, endBlock, rangeToRemove, removalDirection);\n        return removeRangeFromContentState(contentState, adjustedRemovalRange);\n      }\n    }\n\n    var withoutEntities = removeEntitiesAtEdges(contentState, rangeToRemove);\n    return removeRangeFromContentState(withoutEntities, rangeToRemove);\n  },\n  splitBlock: function splitBlock(contentState, selectionState) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\n    var withoutText = removeRangeFromContentState(withoutEntities, selectionState);\n    return splitBlockInContentState(withoutText, withoutText.getSelectionAfter());\n  },\n  applyInlineStyle: function applyInlineStyle(contentState, selectionState, inlineStyle) {\n    return ContentStateInlineStyle.add(contentState, selectionState, inlineStyle);\n  },\n  removeInlineStyle: function removeInlineStyle(contentState, selectionState, inlineStyle) {\n    return ContentStateInlineStyle.remove(contentState, selectionState, inlineStyle);\n  },\n  setBlockType: function setBlockType(contentState, selectionState, blockType) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({\n        type: blockType,\n        depth: 0\n      });\n    });\n  },\n  setBlockData: function setBlockData(contentState, selectionState, blockData) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({\n        data: blockData\n      });\n    });\n  },\n  mergeBlockData: function mergeBlockData(contentState, selectionState, blockData) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({\n        data: block.getData().merge(blockData)\n      });\n    });\n  },\n  applyEntity: function applyEntity(contentState, selectionState, entityKey) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\n    return applyEntityToContentState(withoutEntities, selectionState, entityKey);\n  }\n};\nmodule.exports = DraftModifier;","map":{"version":3,"names":["CharacterMetadata","require","ContentStateInlineStyle","applyEntityToContentState","getCharacterRemovalRange","getContentStateFragment","Immutable","insertFragmentIntoContentState","insertTextIntoContentState","invariant","modifyBlockForContentState","removeEntitiesAtEdges","removeRangeFromContentState","splitBlockInContentState","OrderedSet","DraftModifier","replaceText","contentState","rangeToReplace","text","inlineStyle","entityKey","withoutEntities","withoutText","character","create","style","entity","getSelectionAfter","insertText","targetRange","isCollapsed","process","env","NODE_ENV","moveText","removalRange","movedFragment","afterRemoval","removeRange","replaceWithFragment","fragment","mergeBlockData","arguments","length","undefined","rangeToRemove","removalDirection","startKey","endKey","startBlock","endBlock","getIsBackward","merge","anchorKey","getFocusKey","anchorOffset","getFocusOffset","focusKey","getAnchorKey","focusOffset","getAnchorOffset","isBackward","getBlockForKey","startOffset","getStartOffset","endOffset","getEndOffset","startEntityKey","getEntityAt","endEntityKey","adjustedRemovalRange","getEntityMap","splitBlock","selectionState","applyInlineStyle","add","removeInlineStyle","remove","setBlockType","blockType","block","type","depth","setBlockData","blockData","data","getData","applyEntity","module","exports"],"sources":["/home/sudhanshu/Documents/combett/node_modules/draft-js/lib/DraftModifier.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar CharacterMetadata = require(\"./CharacterMetadata\");\n\nvar ContentStateInlineStyle = require(\"./ContentStateInlineStyle\");\n\nvar applyEntityToContentState = require(\"./applyEntityToContentState\");\n\nvar getCharacterRemovalRange = require(\"./getCharacterRemovalRange\");\n\nvar getContentStateFragment = require(\"./getContentStateFragment\");\n\nvar Immutable = require(\"immutable\");\n\nvar insertFragmentIntoContentState = require(\"./insertFragmentIntoContentState\");\n\nvar insertTextIntoContentState = require(\"./insertTextIntoContentState\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar modifyBlockForContentState = require(\"./modifyBlockForContentState\");\n\nvar removeEntitiesAtEdges = require(\"./removeEntitiesAtEdges\");\n\nvar removeRangeFromContentState = require(\"./removeRangeFromContentState\");\n\nvar splitBlockInContentState = require(\"./splitBlockInContentState\");\n\nvar OrderedSet = Immutable.OrderedSet;\n/**\n * `DraftModifier` provides a set of convenience methods that apply\n * modifications to a `ContentState` object based on a target `SelectionState`.\n *\n * Any change to a `ContentState` should be decomposable into a series of\n * transaction functions that apply the required changes and return output\n * `ContentState` objects.\n *\n * These functions encapsulate some of the most common transaction sequences.\n */\n\nvar DraftModifier = {\n  replaceText: function replaceText(contentState, rangeToReplace, text, inlineStyle, entityKey) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, rangeToReplace);\n    var withoutText = removeRangeFromContentState(withoutEntities, rangeToReplace);\n    var character = CharacterMetadata.create({\n      style: inlineStyle || OrderedSet(),\n      entity: entityKey || null\n    });\n    return insertTextIntoContentState(withoutText, withoutText.getSelectionAfter(), text, character);\n  },\n  insertText: function insertText(contentState, targetRange, text, inlineStyle, entityKey) {\n    !targetRange.isCollapsed() ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Target range must be collapsed for `insertText`.') : invariant(false) : void 0;\n    return DraftModifier.replaceText(contentState, targetRange, text, inlineStyle, entityKey);\n  },\n  moveText: function moveText(contentState, removalRange, targetRange) {\n    var movedFragment = getContentStateFragment(contentState, removalRange);\n    var afterRemoval = DraftModifier.removeRange(contentState, removalRange, 'backward');\n    return DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);\n  },\n  replaceWithFragment: function replaceWithFragment(contentState, targetRange, fragment) {\n    var mergeBlockData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'REPLACE_WITH_NEW_DATA';\n    var withoutEntities = removeEntitiesAtEdges(contentState, targetRange);\n    var withoutText = removeRangeFromContentState(withoutEntities, targetRange);\n    return insertFragmentIntoContentState(withoutText, withoutText.getSelectionAfter(), fragment, mergeBlockData);\n  },\n  removeRange: function removeRange(contentState, rangeToRemove, removalDirection) {\n    var startKey, endKey, startBlock, endBlock;\n\n    if (rangeToRemove.getIsBackward()) {\n      rangeToRemove = rangeToRemove.merge({\n        anchorKey: rangeToRemove.getFocusKey(),\n        anchorOffset: rangeToRemove.getFocusOffset(),\n        focusKey: rangeToRemove.getAnchorKey(),\n        focusOffset: rangeToRemove.getAnchorOffset(),\n        isBackward: false\n      });\n    }\n\n    startKey = rangeToRemove.getAnchorKey();\n    endKey = rangeToRemove.getFocusKey();\n    startBlock = contentState.getBlockForKey(startKey);\n    endBlock = contentState.getBlockForKey(endKey);\n    var startOffset = rangeToRemove.getStartOffset();\n    var endOffset = rangeToRemove.getEndOffset();\n    var startEntityKey = startBlock.getEntityAt(startOffset);\n    var endEntityKey = endBlock.getEntityAt(endOffset - 1); // Check whether the selection state overlaps with a single entity.\n    // If so, try to remove the appropriate substring of the entity text.\n\n    if (startKey === endKey) {\n      if (startEntityKey && startEntityKey === endEntityKey) {\n        var adjustedRemovalRange = getCharacterRemovalRange(contentState.getEntityMap(), startBlock, endBlock, rangeToRemove, removalDirection);\n        return removeRangeFromContentState(contentState, adjustedRemovalRange);\n      }\n    }\n\n    var withoutEntities = removeEntitiesAtEdges(contentState, rangeToRemove);\n    return removeRangeFromContentState(withoutEntities, rangeToRemove);\n  },\n  splitBlock: function splitBlock(contentState, selectionState) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\n    var withoutText = removeRangeFromContentState(withoutEntities, selectionState);\n    return splitBlockInContentState(withoutText, withoutText.getSelectionAfter());\n  },\n  applyInlineStyle: function applyInlineStyle(contentState, selectionState, inlineStyle) {\n    return ContentStateInlineStyle.add(contentState, selectionState, inlineStyle);\n  },\n  removeInlineStyle: function removeInlineStyle(contentState, selectionState, inlineStyle) {\n    return ContentStateInlineStyle.remove(contentState, selectionState, inlineStyle);\n  },\n  setBlockType: function setBlockType(contentState, selectionState, blockType) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({\n        type: blockType,\n        depth: 0\n      });\n    });\n  },\n  setBlockData: function setBlockData(contentState, selectionState, blockData) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({\n        data: blockData\n      });\n    });\n  },\n  mergeBlockData: function mergeBlockData(contentState, selectionState, blockData) {\n    return modifyBlockForContentState(contentState, selectionState, function (block) {\n      return block.merge({\n        data: block.getData().merge(blockData)\n      });\n    });\n  },\n  applyEntity: function applyEntity(contentState, selectionState, entityKey) {\n    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);\n    return applyEntityToContentState(withoutEntities, selectionState, entityKey);\n  }\n};\nmodule.exports = DraftModifier;"],"mappings":"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"},"metadata":{},"sourceType":"script"}